#!/bin/bash
# Complete CI/CD Deployment to n8n.pbradygeorgen.com/dashboard
# Uses nginx configuration and SSH keys from ~/.zshrc

set -e

echo "üññ Alex AI Dashboard - Complete CI/CD Deployment"
echo "=============================================="

# Load environment variables from ~/.zshrc
source ~/.zshrc

# Configuration
SERVER_HOST="n8n.pbradygeorgen.com"
SERVER_USER="ubuntu"  # or root, depending on your setup
SSH_KEY="$SSH_KEY_PATH"
DASHBOARD_PATH="/var/www/dashboard"
NGINX_CONFIG_PATH="/etc/nginx/sites-available/alex-ai-dashboard"
NGINX_ENABLED_PATH="/etc/nginx/sites-enabled/alex-ai-dashboard"

# AWS CloudFront configuration
CLOUDFRONT_DOMAIN="d3pjopnssd0uqw.cloudfront.net"
S3_BUCKET="alex-ai-dashboard-direct-1758689482"

echo "üìä Deployment Configuration:"
echo "   Server: ${SERVER_HOST}"
echo "   User: ${SERVER_USER}"
echo "   SSH Key: ${SSH_KEY}"
echo "   Dashboard Path: ${DASHBOARD_PATH}"
echo "   CloudFront Domain: ${CLOUDFRONT_DOMAIN}"
echo "   N8N URL: ${N8N_URL}"

# Check prerequisites
echo ""
echo "üîç Checking Prerequisites..."

# Check SSH key exists
if [ ! -f "${SSH_KEY}" ]; then
    echo "‚ùå SSH key not found: ${SSH_KEY}"
    exit 1
fi
echo "‚úÖ SSH key found"

# Check AWS credentials
echo "üîê Checking AWS credentials..."
aws sts get-caller-identity --profile AmplifyUser || {
    echo "‚ùå AWS credentials not found"
    exit 1
}
echo "‚úÖ AWS credentials validated"

# Build the dashboard
echo ""
echo "üî® Building dashboard..."
npm run build
echo "‚úÖ Dashboard built successfully"

# Phase 1: Upload files to server
echo ""
echo "üöÄ Phase 1: Upload Files to Server"
echo "================================="

echo "üì§ Uploading dashboard files to server..."
# Create deployment package
tar -czf alex-ai-dashboard-server.tar.gz out/

# Upload to server
scp -i "${SSH_KEY}" alex-ai-dashboard-server.tar.gz ${SERVER_USER}@${SERVER_HOST}:/tmp/
echo "‚úÖ Files uploaded to server"

# Phase 2: Deploy on server
echo ""
echo "üöÄ Phase 2: Server Deployment"
echo "============================="

echo "üîß Deploying on server..."
ssh -i "${SSH_KEY}" ${SERVER_USER}@${SERVER_HOST} << 'EOF'
    echo "üññ Deploying Alex AI Dashboard on Server"
    echo "======================================="
    
    # Create dashboard directory
    sudo mkdir -p /var/www/dashboard
    cd /var/www/dashboard
    
    # Extract dashboard files
    echo "üì¶ Extracting dashboard files..."
    sudo tar -xzf /tmp/alex-ai-dashboard-server.tar.gz
    
    # Set permissions
    echo "üîê Setting permissions..."
    sudo chown -R www-data:www-data /var/www/dashboard
    sudo chmod -R 755 /var/www/dashboard
    
    # Cleanup
    rm -f /tmp/alex-ai-dashboard-server.tar.gz
    
    echo "‚úÖ Dashboard files deployed"
EOF

echo "‚úÖ Server deployment completed"

# Phase 3: Configure nginx
echo ""
echo "üöÄ Phase 3: Nginx Configuration"
echo "=============================="

echo "üîß Creating nginx configuration..."
cat > nginx-config.conf << EOF
server {
    listen 80;
    listen 443 ssl http2;
    server_name n8n.pbradygeorgen.com;
    
    # SSL configuration (update paths to your SSL certificates)
    # ssl_certificate /etc/ssl/certs/n8n.pbradygeorgen.com.crt;
    # ssl_certificate_key /etc/ssl/private/n8n.pbradygeorgen.com.key;
    
    # Dashboard location - proxy to CloudFront
    location /dashboard/ {
        proxy_pass https://${CLOUDFRONT_DOMAIN}/;
        proxy_set_header Host ${CLOUDFRONT_DOMAIN};
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        # CORS headers for API calls
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization";
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        # Cache control
        proxy_cache_bypass \$http_upgrade;
        proxy_cache_valid 200 302 10m;
        proxy_cache_valid 404 1m;
    }
    
    # Alternative: Serve files directly from server (uncomment if needed)
    # location /dashboard/ {
    #     alias /var/www/dashboard/;
    #     index index.html;
    #     try_files \$uri \$uri/ /dashboard/index.html;
    #     
    #     # CORS headers
    #     add_header Access-Control-Allow-Origin *;
    #     add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
    #     add_header Access-Control-Allow-Headers "Content-Type, Authorization";
    #     
    #     # Security headers
    #     add_header X-Frame-Options "SAMEORIGIN" always;
    #     add_header X-Content-Type-Options "nosniff" always;
    #     add_header X-XSS-Protection "1; mode=block" always;
    # }
    
    # N8N API proxy
    location /api/ {
        proxy_pass https://n8n.pbradygeorgen.com/api/;
        proxy_set_header Host n8n.pbradygeorgen.com;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        # CORS headers
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization";
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
EOF

echo "üì§ Uploading nginx configuration to server..."
scp -i "${SSH_KEY}" nginx-config.conf ${SERVER_USER}@${SERVER_HOST}:/tmp/

echo "üîß Applying nginx configuration on server..."
ssh -i "${SSH_KEY}" ${SERVER_USER}@${SERVER_HOST} << 'EOF'
    echo "üîß Configuring nginx..."
    
    # Backup existing config if it exists
    if [ -f /etc/nginx/sites-available/alex-ai-dashboard ]; then
        sudo cp /etc/nginx/sites-available/alex-ai-dashboard /etc/nginx/sites-available/alex-ai-dashboard.backup
    fi
    
    # Install new config
    sudo mv /tmp/nginx-config.conf /etc/nginx/sites-available/alex-ai-dashboard
    
    # Enable the site
    sudo ln -sf /etc/nginx/sites-available/alex-ai-dashboard /etc/nginx/sites-enabled/
    
    # Test nginx configuration
    sudo nginx -t && {
        sudo systemctl reload nginx
        echo "‚úÖ Nginx configuration applied and reloaded"
    } || {
        echo "‚ùå Nginx configuration test failed"
        exit 1
    }
    
    echo "‚úÖ Nginx configuration complete"
EOF

echo "‚úÖ Nginx configuration completed"

# Phase 4: Test deployment
echo ""
echo "üöÄ Phase 4: Deployment Testing"
echo "============================="

echo "üß™ Testing deployment..."
DASHBOARD_URL="https://${SERVER_HOST}/dashboard/"

# Wait a moment for nginx to reload
sleep 5

echo "Testing dashboard accessibility..."
if curl -s -I "${DASHBOARD_URL}" | grep -q "200\|301\|302"; then
    echo "‚úÖ Dashboard is accessible at: ${DASHBOARD_URL}"
else
    echo "‚ö†Ô∏è  Dashboard may not be ready yet or needs DNS propagation"
    echo "   Testing CloudFront directly..."
    if curl -s -I "https://${CLOUDFRONT_DOMAIN}" | grep -q "200"; then
        echo "‚úÖ CloudFront is accessible: https://${CLOUDFRONT_DOMAIN}"
    fi
fi

# Phase 5: CI/CD Integration
echo ""
echo "üöÄ Phase 5: CI/CD Integration Setup"
echo "================================="

echo "üîß Creating GitHub Actions workflow..."
mkdir -p .github/workflows

cat > .github/workflows/deploy-dashboard.yml << EOF
name: Deploy Alex AI Dashboard

on:
  push:
    branches: [ main, master ]
    paths: [ 'dashboard/**' ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json
    
    - name: Install dependencies
      working-directory: ./dashboard
      run: npm ci
    
    - name: Build dashboard
      working-directory: ./dashboard
      run: npm run build
      env:
        N8N_API_URL: \${{ secrets.N8N_API_URL }}
        N8N_API_KEY: \${{ secrets.N8N_API_KEY }}
        SUPABASE_URL: \${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: \${{ secrets.SUPABASE_ANON_KEY }}
    
    - name: Deploy to AWS S3
      run: |
        cd dashboard
        ./scripts/aws-direct-deploy.sh
    
    - name: Deploy to N8N Server
      run: |
        cd dashboard
        ./scripts/nginx-cicd-deploy.sh
      env:
        SSH_PRIVATE_KEY: \${{ secrets.SSH_PRIVATE_KEY }}
        SERVER_HOST: \${{ secrets.SERVER_HOST }}
        SERVER_USER: \${{ secrets.SERVER_USER }}
EOF

echo "‚úÖ GitHub Actions workflow created"

# Summary
echo ""
echo "üéâ Complete CI/CD Deployment Success!"
echo "==================================="
echo ""
echo "üì¶ Deployment Complete:"
echo "   ‚Ä¢ AWS S3 Bucket: ${S3_BUCKET}"
echo "   ‚Ä¢ CloudFront: https://${CLOUDFRONT_DOMAIN}"
echo "   ‚Ä¢ Server Files: ${SERVER_HOST}:${DASHBOARD_PATH}"
echo "   ‚Ä¢ Nginx Config: ${NGINX_CONFIG_PATH}"
echo "   ‚Ä¢ Dashboard URL: ${DASHBOARD_URL}"
echo ""
echo "üìä Features Deployed:"
echo "   ‚Ä¢ LCRS (Left-Center-Right-Sidebar) layout"
echo "   ‚Ä¢ Dark mode Federation theme"
echo "   ‚Ä¢ Real-time N8N integration"
echo "   ‚Ä¢ Supabase memory system"
echo "   ‚Ä¢ CloudFront CDN + Server backup"
echo "   ‚Ä¢ Automated CI/CD pipeline"
echo ""
echo "üîß CI/CD Pipeline Ready:"
echo "   ‚Ä¢ GitHub Actions workflow configured"
echo "   ‚Ä¢ Automated deployment on push to main"
echo "   ‚Ä¢ Environment variables from secrets"
echo "   ‚Ä¢ Multi-stage deployment (AWS + Server)"
echo ""
echo "üß™ Ready for Testing:"
echo "   ‚Ä¢ Dashboard: ${DASHBOARD_URL}"
echo "   ‚Ä¢ Health Check: https://${SERVER_HOST}/health"
echo "   ‚Ä¢ API Proxy: https://${SERVER_HOST}/api/"
echo ""
echo "‚úÖ Alex AI Dashboard CI/CD deployment complete!"
echo "üöÄ Ready to test knowledge gathering and security!"

# Cleanup
rm -f alex-ai-dashboard-server.tar.gz nginx-config.conf
