{
  "id": "C5Kq9nZTnZEc0EWo",
  "name": "UTILITY - AI Controller - OpenRouter - Production",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "enhanced-unified-ai",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "cursor-webhook-trigger",
      "name": "Cursor AI Controller Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "enhanced-unified-ai-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced input validation for Cursor + Claude + OpenRouter integration\nconst inputData = $input.all()[0].json;\n\n// Validate required fields\nif (!inputData.task_description) {\n  throw new Error('task_description is required');\n}\n\n// Extract task context and determine routing strategy\nconst context = inputData.context || {};\nconst budgetConstraints = inputData.budget_constraints || { max_cost: 0.10 };\nconst cursorContext = inputData.cursor_context || {};\nconst claudeCrewContext = inputData.claude_crew_context || {};\n\n// Determine if this should go to local Claude agents or OpenRouter\nconst shouldUseLocalClaude = context.use_local_claude || false;\nconst taskComplexity = context.task_complexity || 'medium';\nconst taskType = context.task_type || 'general';\n\n// Prepare enhanced data structure for unified processing\nreturn {\n  // Core task information\n  task_description: inputData.task_description,\n  task_type: taskType,\n  task_complexity: taskComplexity,\n  \n  // Context information\n  context: context,\n  cursor_context: cursorContext,\n  claude_crew_context: claudeCrewContext,\n  \n  // Routing decisions\n  routing_strategy: {\n    use_local_claude: shouldUseLocalClaude,\n    use_openrouter: !shouldUseLocalClaude,\n    fallback_strategy: 'openrouter'\n  },\n  \n  // Budget and constraints\n  budget_constraints: budgetConstraints,\n  \n  // Metadata\n  timestamp: new Date().toISOString(),\n  request_id: $node[\"cursor-webhook-trigger\"].json.request_id || Date.now().toString(),\n  source: 'cursor_extension'\n};"
      },
      "id": "enhanced-input-validator",
      "name": "Enhanced Input Validator & Router",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Route to local Claude agents or OpenRouter based on task complexity and type\nconst routingData = $input.all()[0].json;\nconst { routing_strategy, task_complexity, task_type } = routingData;\n\n// Decision logic for routing\nlet targetSystem = 'openrouter';\nlet reasoning = '';\n\nif (routing_strategy.use_local_claude) {\n  // Use local Claude agents for:\n  // - Strategic planning (Captain Picard)\n  // - Complex analysis (Commander Data)\n  // - System architecture (Geordi La Forge)\n  if (['strategic_planning', 'complex_analysis', 'system_architecture'].includes(task_type)) {\n    targetSystem = 'local_claude';\n    reasoning = `Task type '${task_type}' with ${task_complexity} complexity - routing to local Claude crew`;\n  }\n}\n\n// Always use OpenRouter for:\n// - Code generation (GPT-4o is excellent)\n// - Quick analysis (Claude Haiku is cost-effective)\n// - Multimodal tasks (GPT-4o supports images)\nif (['code_generation', 'quick_analysis', 'multimodal'].includes(task_type)) {\n  targetSystem = 'openrouter';\n  reasoning = `Task type '${task_type}' - routing to OpenRouter for optimal performance`;\n}\n\n// Cost optimization: Use local Claude for high-complexity strategic tasks\nif (task_complexity === 'high' && task_type === 'strategic_planning') {\n  targetSystem = 'local_claude';\n  reasoning = 'High-complexity strategic planning - using local Claude crew for cost optimization';\n}\n\nreturn {\n  ...routingData,\n  routing_decision: {\n    target_system: targetSystem,\n    reasoning: reasoning,\n    estimated_cost: targetSystem === 'local_claude' ? 0.0 : 0.05,\n    response_time: targetSystem === 'local_claude' ? 'fast' : 'medium'\n  }\n};"
      },
      "id": "intelligent-router",
      "name": "Intelligent Routing Decision Engine",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "command": "python3",
        "arguments": "enhanced_unified_router.py",
        "options": {}
      },
      "id": "enhanced-python-router",
      "name": "Enhanced Python Router (Local Claude + OpenRouter)",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process the enhanced router output and format for Cursor UI\nconst routerOutput = $input.all()[0].json;\n\n// Check if execution was successful\nif (routerOutput.error) {\n  return {\n    success: false,\n    error: routerOutput.error,\n    timestamp: new Date().toISOString(),\n    ui_feedback: {\n      message: 'Routing failed - please try again',\n      type: 'error',\n      show_retry: true\n    }\n  };\n}\n\n// Parse the router output\nconst result = JSON.parse(routerOutput.stdout || '{}');\n\nif (result.success) {\n  // Enhanced response with UI elements for Cursor\n  return {\n    success: true,\n    \n    // Core response data\n    ai_response: result.execution_result.response,\n    model_used: result.execution_result.model_used,\n    \n    // Enhanced routing information\n    routing_summary: {\n      task_type: result.routing_summary.task_type,\n      complexity: result.routing_summary.complexity,\n      selected_model: result.routing_summary.selected_model,\n      reasoning: result.routing_summary.reasoning,\n      total_cost: result.routing_summary.total_cost,\n      system_used: result.routing_summary.system_used\n    },\n    \n    // UI enhancement data for Cursor\n    ui_enhancements: {\n      // Visual cues for LLM models\n      model_visual_cue: {\n        model_name: result.routing_summary.selected_model,\n        provider: result.routing_summary.system_used,\n        icon: result.routing_summary.system_used === 'local_claude' ? 'ü§ñ' : 'üåê',\n        color: result.routing_summary.system_used === 'local_claude' ? '#00ff00' : '#0080ff'\n      },\n      \n      // Cost display\n      cost_display: {\n        total_cost: result.routing_summary.total_cost,\n        cost_breakdown: result.execution_result.cost_breakdown || {},\n        cost_efficiency: result.routing_summary.cost_efficiency || 'high',\n        savings_vs_alternative: result.routing_summary.savings_vs_alternative || 0.0\n      },\n      \n      // Sub-agent consistency indicators\n      sub_agent_status: {\n        crew_member_used: result.routing_summary.crew_member || null,\n        crew_consistency: result.routing_summary.crew_consistency || 'high',\n        n8n_workflow_status: 'active',\n        last_sync: new Date().toISOString()\n      },\n      \n      // Performance metrics\n      performance_metrics: {\n        response_time: result.execution_result.response_time || 'fast',\n        token_usage: result.execution_result.token_usage || {},\n        model_confidence: result.routing_summary.confidence || 0.95\n      }\n    },\n    \n    // Alternative suggestions\n    alternatives: result.llm_selection.alternatives || [],\n    \n    // Metadata\n    timestamp: new Date().toISOString(),\n    request_id: result.request_id\n  };\n} else {\n  return {\n    success: false,\n    error: result.error || 'Unknown error occurred',\n    timestamp: new Date().toISOString(),\n    ui_feedback: {\n      message: 'AI processing failed - check logs for details',\n      type: 'error',\n      show_retry: true\n    }\n  };\n}"
      },
      "id": "cursor-ui-enhancer",
      "name": "Cursor UI Enhancement & Response Formatter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "enhanced-webhook-response",
      "name": "Enhanced Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced logging and monitoring for the unified system\nconst responseData = $input.all()[0].json;\n\nif (responseData.success) {\n  const { routing_summary, ui_enhancements } = responseData;\n  \n  console.log(`üöÄ Enhanced Unified AI Success:`);\n  console.log(`   Task Type: ${routing_summary.task_type}`);\n  console.log(`   Complexity: ${routing_summary.complexity}`);\n  console.log(`   System Used: ${routing_summary.system_used}`);\n  console.log(`   Model: ${routing_summary.selected_model}`);\n  console.log(`   Cost: $${routing_summary.total_cost}`);\n  console.log(`   UI Enhancement: ${ui_enhancements.model_visual_cue.icon} ${ui_enhancements.model_visual_cue.model_name}`);\n  \n  // Log sub-agent consistency\n  if (ui_enhancements.sub_agent_status.crew_member_used) {\n    console.log(`   Crew Member: ${ui_enhancements.sub_agent_status.crew_member_used}`);\n    console.log(`   Crew Consistency: ${ui_enhancements.sub_agent_status.crew_consistency}`);\n  }\n  \n  // Log cost optimization\n  if (ui_enhancements.cost_display.savings_vs_alternative > 0) {\n    console.log(`   Cost Savings: $${ui_enhancements.cost_display.savings_vs_alternative}`);\n  }\n} else {\n  console.error(`‚ùå Enhanced Unified AI Failed: ${responseData.error}`);\n}\n\n// Pass through the data for potential further processing\nreturn responseData;"
      },
      "id": "enhanced-logging-monitoring",
      "name": "Enhanced Logging & Monitoring",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        500
      ]
    },
    {
      "parameters": {
        "jsCode": "// Real-time status updates for Cursor UI\nconst statusData = $input.all()[0].json;\n\nif (statusData.success) {\n  // Update N8N workflow status\n  const workflowStatus = {\n    status: 'active',\n    last_execution: new Date().toISOString(),\n    performance_metrics: statusData.ui_enhancements.performance_metrics,\n    cost_metrics: statusData.ui_enhancements.cost_display,\n    sub_agent_status: statusData.ui_enhancements.sub_agent_status\n  };\n  \n  // This could be sent to a status endpoint or stored for Cursor to query\n  console.log('üìä Workflow Status Updated:', workflowStatus);\n  \n  // Return status for potential real-time updates\n  return {\n    workflow_status: workflowStatus,\n    cursor_ui_update: {\n      model_status: statusData.ui_enhancements.model_visual_cue,\n      cost_status: statusData.ui_enhancements.cost_display,\n      performance_status: statusData.ui_enhancements.performance_metrics\n    }\n  };\n}\n\nreturn statusData;"
      },
      "id": "real-time-status-updater",
      "name": "Real-time Status Updater",
      "type": "n8n-nodes-base.code",
      "position": [
        1340,
        500
      ]
    }
  ],
  "connections": {
    "cursor-webhook-trigger": {
      "main": [
        [
          {
            "node": "enhanced-input-validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "enhanced-input-validator": {
      "main": [
        [
          {
            "node": "intelligent-router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "intelligent-router": {
      "main": [
        [
          {
            "node": "enhanced-python-router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "enhanced-python-router": {
      "main": [
        [
          {
            "node": "cursor-ui-enhancer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cursor-ui-enhancer": {
      "main": [
        [
          {
            "node": "enhanced-webhook-response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "enhanced-logging-monitoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "enhanced-logging-monitoring": {
      "main": [
        [
          {
            "node": "real-time-status-updater",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": null,
  "versionId": "c7c2eb5a-1899-48ed-9ed2-d67c4e935558",
  "triggerCount": 1,
  "createdAt": "2025-09-03T00:07:17.204Z",
  "updatedAt": "2025-09-21T21:31:50.164Z",
  "tags": [],
  "_downloadedAt": "2025-09-21T21:33:26.803Z",
  "_category": "utility-workflows",
  "_source": "remote-n8n"
}