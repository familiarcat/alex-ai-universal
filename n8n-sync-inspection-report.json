{
  "timestamp": "2025-09-21T23:54:53.199Z",
  "totalRemote": 31,
  "totalLocal": 30,
  "synced": 30,
  "discrepancies": [],
  "missingRemote": [],
  "missingLocal": [
    {
      "name": "2yIY7drpyIstYXqk",
      "workflow": {
        "createdAt": "2025-09-21T03:21:58.162Z",
        "updatedAt": "2025-09-21T21:31:48.676Z",
        "id": "2yIY7drpyIstYXqk",
        "name": "ANTI-HALLUCINATION - HTTP Handler - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "anti-hallucination-http",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "prompt-interception",
            "name": "Prompt Interception",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Analyze prompt context and prepare for crew activation\nconst prompt = $input.first().json.prompt;\nconst timestamp = new Date().toISOString();\n\n// Extract prompt metadata\nconst promptContext = {\n  text: prompt,\n  length: prompt.length,\n  timestamp: timestamp,\n  domain: detectDomain(prompt),\n  complexity: detectComplexity(prompt),\n  type: detectPromptType(prompt)\n};\n\n// Detect domain from prompt\nfunction detectDomain(prompt) {\n  const domains = {\n    'machine-learning': ['ml', 'ai', 'model', 'training', 'neural'],\n    'security': ['security', 'vulnerability', 'threat', 'attack'],\n    'psychology': ['emotion', 'behavior', 'psychology', 'mental'],\n    'engineering': ['code', 'architecture', 'system', 'design'],\n    'strategy': ['strategy', 'planning', 'leadership', 'management']\n  };\n  \n  const lowerPrompt = prompt.toLowerCase();\n  for (const [domain, keywords] of Object.entries(domains)) {\n    if (keywords.some(keyword => lowerPrompt.includes(keyword))) {\n      return domain;\n    }\n  }\n  return 'general';\n}\n\n// Detect complexity level\nfunction detectComplexity(prompt) {\n  const highComplexityKeywords = ['complex', 'advanced', 'sophisticated', 'comprehensive'];\n  const mediumComplexityKeywords = ['explain', 'describe', 'analyze', 'compare'];\n  \n  const lowerPrompt = prompt.toLowerCase();\n  if (highComplexityKeywords.some(keyword => lowerPrompt.includes(keyword))) {\n    return 'high';\n  } else if (mediumComplexityKeywords.some(keyword => lowerPrompt.includes(keyword))) {\n    return 'medium';\n  }\n  return 'low';\n}\n\n// Detect prompt type\nfunction detectPromptType(prompt) {\n  const technicalKeywords = ['code', 'algorithm', 'technical', 'system'];\n  const creativeKeywords = ['creative', 'design', 'artistic', 'innovative'];\n  const analyticalKeywords = ['analyze', 'evaluate', 'compare', 'assess'];\n  const empathicKeywords = ['feel', 'emotion', 'empathy', 'understand'];\n  const strategicKeywords = ['strategy', 'plan', 'leadership', 'vision'];\n  \n  const lowerPrompt = prompt.toLowerCase();\n  if (technicalKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'technical';\n  if (creativeKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'creative';\n  if (analyticalKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'analytical';\n  if (empathicKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'empathic';\n  if (strategicKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'strategic';\n  return 'analytical';\n}\n\nreturn {\n  promptContext,\n  originalPrompt: prompt,\n  processingId: `ah_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n};"
            },
            "id": "prompt-analysis",
            "name": "Prompt Analysis",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              460,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Split prompt context for crew member processing\nconst promptContext = $input.first().json;\nconst crewMembers = [\n  'Captain Picard',\n  'Commander Data', \n  'Counselor Troi',\n  'Lieutenant Worf',\n  'Commander Riker',\n  'Lieutenant Commander La Forge',\n  'Doctor Crusher',\n  'Lieutenant Commander Tasha Yar',\n  'Lieutenant Commander Spock'\n];\n\n// Create individual crew member tasks\nconst crewTasks = crewMembers.map(crewMember => ({\n  crewMember,\n  promptContext: promptContext.promptContext,\n  originalPrompt: promptContext.originalPrompt,\n  processingId: promptContext.processingId,\n  timestamp: new Date().toISOString()\n}));\n\nreturn crewTasks;"
            },
            "id": "crew-splitter",
            "name": "Crew Splitter",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              680,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Optimize LLM selection for crew member\nconst crewTask = $input.first().json;\nconst { crewMember, promptContext } = crewTask;\n\n// Crew member expertise mapping\nconst crewExpertise = {\n  'Captain Picard': ['leadership', 'strategy', 'diplomacy', 'ethics'],\n  'Commander Data': ['technical-analysis', 'logic', 'computation', 'science'],\n  'Counselor Troi': ['empathy', 'psychology', 'counseling', 'emotions'],\n  'Lieutenant Worf': ['security', 'tactics', 'combat', 'honor'],\n  'Commander Riker': ['leadership', 'tactics', 'diplomacy', 'command'],\n  'Lieutenant Commander La Forge': ['engineering', 'technology', 'innovation'],\n  'Doctor Crusher': ['medical', 'healing', 'science', 'research'],\n  'Lieutenant Commander Tasha Yar': ['security', 'tactics', 'survival'],\n  'Lieutenant Commander Spock': ['logic', 'science', 'analysis']\n};\n\n// LLM optimization based on context and expertise\nfunction selectOptimalLLM(crewMember, context) {\n  const expertise = crewExpertise[crewMember] || ['general'];\n  \n  // Context-based LLM selection\n  if (context.type === 'technical' && expertise.includes('technical-analysis')) {\n    return 'openai/gpt-4-turbo';\n  }\n  if (context.type === 'empathic' && expertise.includes('empathy')) {\n    return 'anthropic/claude-3-sonnet';\n  }\n  if (context.type === 'strategic' && expertise.includes('leadership')) {\n    return 'anthropic/claude-3-opus';\n  }\n  if (context.type === 'analytical' && expertise.includes('logic')) {\n    return 'openai/gpt-4-turbo';\n  }\n  \n  // Default LLM selection\n  if (expertise.includes('technical-analysis') || expertise.includes('logic')) {\n    return 'openai/gpt-4-turbo';\n  }\n  return 'anthropic/claude-3-sonnet';\n}\n\nconst optimalLLM = selectOptimalLLM(crewMember, promptContext);\nconst confidence = Math.random() * 0.3 + 0.7; // Simulate confidence between 0.7-1.0\n\nreturn {\n  ...crewTask,\n  optimalLLM,\n  confidence,\n  reasoning: `Selected ${optimalLLM} for ${crewMember} based on ${promptContext.type} context and ${crewExpertise[crewMember].join(', ')} expertise`\n};"
            },
            "id": "llm-optimization",
            "name": "LLM Optimization",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              900,
              300
            ]
          },
          {
            "parameters": {
              "url": "https://openrouter.ai/api/v1/chat/completions",
              "authentication": "predefinedCredentialType",
              "nodeCredentialType": "openRouterApi",
              "sendHeaders": true,
              "headerParameters": {
                "parameters": [
                  {
                    "name": "Authorization",
                    "value": "Bearer {{ $credentials.openRouterApi.apiKey }}"
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ]
              },
              "sendBody": true,
              "bodyParameters": {
                "parameters": [
                  {
                    "name": "model",
                    "value": "={{ $json.optimalLLM }}"
                  },
                  {
                    "name": "messages",
                    "value": "=[{\"role\": \"system\", \"content\": \"You are {{ $json.crewMember }} from Star Trek: The Next Generation. Provide your perspective on the given prompt, drawing from your unique expertise and personality. Be specific, insightful, and maintain your character's voice while providing valuable analysis.\"}, {\"role\": \"user\", \"content\": \"Original Prompt: {{ $json.originalPrompt }}\\n\\nPlease provide your perspective on this prompt, drawing from your unique expertise and personality. Be specific, insightful, and maintain your character's voice while providing valuable analysis.\"}]"
                  },
                  {
                    "name": "temperature",
                    "value": "0.7"
                  },
                  {
                    "name": "max_tokens",
                    "value": "1000"
                  }
                ]
              },
              "options": {}
            },
            "id": "crew-response-generation",
            "name": "Crew Response Generation",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.2,
            "position": [
              1120,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Process crew member response\nconst input = $input.first().json;\nconst crewTask = input.crewTask || input;\nconst llmResponse = input.choices?.[0]?.message?.content || 'No response generated';\n\nreturn {\n  crewMember: crewTask.crewMember,\n  response: llmResponse,\n  llmUsed: crewTask.optimalLLM,\n  confidence: crewTask.confidence,\n  timestamp: new Date().toISOString(),\n  context: crewTask.originalPrompt,\n  optimization: {\n    crewMember: crewTask.crewMember,\n    promptContext: JSON.stringify(crewTask.promptContext),\n    personaSkills: crewTask.promptContext.domain,\n    optimalLLM: crewTask.optimalLLM,\n    confidence: crewTask.confidence,\n    reasoning: crewTask.reasoning,\n    timestamp: crewTask.timestamp\n  }\n};"
            },
            "id": "response-processing",
            "name": "Response Processing",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              1340,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Collect all crew perspectives and analyze for hallucinations\nconst crewPerspectives = $input.all().map(item => item.json);\n\nif (crewPerspectives.length < 2) {\n  return {\n    error: 'Insufficient crew responses for consensus analysis',\n    perspectives: crewPerspectives\n  };\n}\n\n// Calculate consensus (simplified)\nconst responses = crewPerspectives.map(p => p.response);\nconst consensusResponse = responses[Math.floor(Math.random() * responses.length)]; // Simplified consensus\nconst consensusConfidence = crewPerspectives.reduce((sum, p) => sum + p.confidence, 0) / crewPerspectives.length;\n\n// Analyze for hallucinations (simplified deviation detection)\nconst hallucinationAnalyses = crewPerspectives.map(perspective => {\n  // Simple deviation calculation based on response length and keywords\n  const responseLength = perspective.response.length;\n  const avgLength = responses.reduce((sum, r) => sum + r.length, 0) / responses.length;\n  const lengthDeviation = Math.abs(responseLength - avgLength) / avgLength;\n  \n  // Simple keyword similarity check\n  const responseWords = perspective.response.toLowerCase().split(/\\s+/);\n  const consensusWords = consensusResponse.toLowerCase().split(/\\s+/);\n  const commonWords = responseWords.filter(word => consensusWords.includes(word));\n  const similarity = commonWords.length / Math.max(responseWords.length, consensusWords.length);\n  \n  const deviationScore = (lengthDeviation * 0.3) + ((1 - similarity) * 0.7);\n  const isHallucination = deviationScore > 0.3; // Threshold\n  \n  return {\n    crewMember: perspective.crewMember,\n    isHallucination,\n    deviationScore,\n    consensusAlignment: 1 - deviationScore,\n    correctionPrompt: isHallucination ? `Your response deviated from crew consensus. Please revise: ${consensusResponse}` : '',\n    learningOpportunity: isHallucination ? `Learning opportunity for ${perspective.crewMember}: improve consensus alignment` : '',\n    detectedAt: new Date().toISOString(),\n    severity: deviationScore > 0.7 ? 'high' : deviationScore > 0.5 ? 'medium' : 'low'\n  };\n});\n\nconst hallucinationsDetected = hallucinationAnalyses.filter(a => a.isHallucination);\nconst overallHealth = 1 - (hallucinationsDetected.length / crewPerspectives.length);\n\nreturn {\n  perspectives: crewPerspectives,\n  consensus: {\n    consensusResponse,\n    consensusConfidence,\n    participantCount: crewPerspectives.length,\n    agreementScore: overallHealth,\n    dominantPerspective: crewPerspectives[0]?.crewMember,\n    outlierCount: hallucinationsDetected.length\n  },\n  analyses: hallucinationAnalyses,\n  overallHealth,\n  hallucinationsDetected: hallucinationsDetected.length,\n  processingComplete: true\n};"
            },
            "id": "hallucination-analysis",
            "name": "Hallucination Analysis",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              1560,
              300
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ $json }}"
            },
            "id": "response-return",
            "name": "Response Return",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1780,
              300
            ]
          }
        ],
        "connections": {
          "Prompt Interception": {
            "main": [
              [
                {
                  "node": "Prompt Analysis",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Prompt Analysis": {
            "main": [
              [
                {
                  "node": "Crew Splitter",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Crew Splitter": {
            "main": [
              [
                {
                  "node": "LLM Optimization",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "LLM Optimization": {
            "main": [
              [
                {
                  "node": "Crew Response Generation",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Crew Response Generation": {
            "main": [
              [
                {
                  "node": "Response Processing",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Response Processing": {
            "main": [
              [
                {
                  "node": "Hallucination Analysis",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Hallucination Analysis": {
            "main": [
              [
                {
                  "node": "Response Return",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": {},
        "versionId": "131a99a5-c235-4521-a532-51fdbc31b6c6",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-09-21T03:21:58.164Z",
            "updatedAt": "2025-09-21T03:21:58.164Z",
            "role": "workflow:owner",
            "workflowId": "2yIY7drpyIstYXqk",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "36KPle5mPiMaazG6",
      "workflow": {
        "createdAt": "2025-08-27T04:27:24.901Z",
        "updatedAt": "2025-09-21T21:31:48.506Z",
        "id": "36KPle5mPiMaazG6",
        "name": "CREW - Lieutenant Uhura - Communications & I/O - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "crew-lieutenant-uhura",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "82121549-849d-40b7-9e45-4c5e5c0c5d13",
            "name": "Lieutenant Uhura Directive",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ],
            "webhookId": "bf8250ce-9a8a-4ee3-a934-bc41abc8b1dd"
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories?crew_member=eq.Lieutenant Uhura",
              "options": {}
            },
            "id": "b57a7a71-c27f-4a73-8cfe-d2c6b75ce550",
            "name": "Lieutenant Uhura Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "8a44b297-dd95-4dae-9f9b-9fe2443439a6",
            "name": "LLM Selection Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              336
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "7c527b48-4121-4bcb-90a0-aea8bb5e32b0",
            "name": "Lieutenant Uhura AI Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              688,
              304
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "edc393a1-0a8f-4deb-8c73-e04da860ddb6",
            "name": "Lieutenant Uhura Memory Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "2234d313-0b86-411a-b6b1-571660626cbc",
            "name": "Observation Lounge Communication",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              304
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ { \"crew_member\": \"Lieutenant Uhura\", \"response\": $json.choices[0].message.content, \"timestamp\": new Date().toISOString() } }}",
              "options": {}
            },
            "id": "03b4c2e3-5399-452e-96c5-326e416a06f2",
            "name": "Lieutenant Uhura Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1136,
              304
            ]
          }
        ],
        "connections": {
          "82121549-849d-40b7-9e45-4c5e5c0c5d13": {
            "main": [
              [
                {
                  "node": "b57a7a71-c27f-4a73-8cfe-d2c6b75ce550",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "8a44b297-dd95-4dae-9f9b-9fe2443439a6",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "b57a7a71-c27f-4a73-8cfe-d2c6b75ce550": {
            "main": [
              [
                {
                  "node": "7c527b48-4121-4bcb-90a0-aea8bb5e32b0",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "8a44b297-dd95-4dae-9f9b-9fe2443439a6": {
            "main": [
              [
                {
                  "node": "7c527b48-4121-4bcb-90a0-aea8bb5e32b0",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "7c527b48-4121-4bcb-90a0-aea8bb5e32b0": {
            "main": [
              [
                {
                  "node": "edc393a1-0a8f-4deb-8c73-e04da860ddb6",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "2234d313-0b86-411a-b6b1-571660626cbc",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "edc393a1-0a8f-4deb-8c73-e04da860ddb6": {
            "main": [
              [
                {
                  "node": "03b4c2e3-5399-452e-96c5-326e416a06f2",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "2234d313-0b86-411a-b6b1-571660626cbc": {
            "main": [
              [
                {
                  "node": "03b4c2e3-5399-452e-96c5-326e416a06f2",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Lieutenant Uhura Directive": {
            "main": [
              [
                {
                  "node": "Lieutenant Uhura Memory Retrieval",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Lieutenant Uhura Memory Retrieval": {
            "main": [
              [
                {
                  "node": "LLM Selection Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "LLM Selection Agent": {
            "main": [
              [
                {
                  "node": "Lieutenant Uhura AI Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Lieutenant Uhura AI Agent": {
            "main": [
              [
                {
                  "node": "Observation Lounge Communication",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Observation Lounge Communication": {
            "main": [
              [
                {
                  "node": "Lieutenant Uhura Memory Storage",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Lieutenant Uhura Memory Storage": {
            "main": [
              [
                {
                  "node": "Lieutenant Uhura Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {},
        "staticData": null,
        "meta": null,
        "pinData": {},
        "versionId": "75dca333-f365-400e-b285-8ef88de572f3",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-27T04:27:24.902Z",
            "updatedAt": "2025-08-27T04:27:24.902Z",
            "role": "workflow:owner",
            "workflowId": "36KPle5mPiMaazG6",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "58B6WvShXJ7bj8Ni",
      "workflow": {
        "createdAt": "2025-09-05T09:49:27.281Z",
        "updatedAt": "2025-09-21T21:31:49.465Z",
        "id": "58B6WvShXJ7bj8Ni",
        "name": "PROJECT - Alex AI - Job Opportunities - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "alex-ai-job-opportunities",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "webhook-trigger",
            "name": "Webhook Trigger",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              300
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ { \"data\": [], \"total\": 0, \"message\": \"Alex AI Job Opportunities - Production endpoint working\", \"timestamp\": new Date().toISOString() } }}"
            },
            "id": "respond-success",
            "name": "Respond Success",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              460,
              300
            ]
          }
        ],
        "connections": {
          "Webhook Trigger": {
            "main": [
              [
                {
                  "node": "Respond Success",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "621d4721-cfa2-4106-8909-2ff5ddfeaf2e",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-09-05T09:49:27.283Z",
            "updatedAt": "2025-09-05T09:49:27.283Z",
            "role": "workflow:owner",
            "workflowId": "58B6WvShXJ7bj8Ni",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "AeoHsSbJAXbWSs8Y",
      "workflow": {
        "createdAt": "2025-08-27T02:25:45.931Z",
        "updatedAt": "2025-09-21T04:30:50.860Z",
        "id": "AeoHsSbJAXbWSs8Y",
        "name": "SYSTEM - OpenRouter Agent Coordination - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "path": "082503f8-8939-40c4-9620-81e3eff05d82",
              "options": {}
            },
            "id": "federation_directive",
            "name": "Federation Directive Receiver",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ],
            "webhookId": "082503f8-8939-40c4-9620-81e3eff05d82"
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_storage",
            "name": "Federation Concise Agency Memory Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_retrieval",
            "name": "Federation Concise Agency Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "parameters": {
              "options": {}
            },
            "id": "response_handler",
            "name": "Response Handler",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              464,
              304
            ]
          }
        ],
        "connections": {
          "Federation Directive Receiver": {
            "main": [
              [
                {
                  "node": "Response Handler",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Federation Concise Agency Memory Storage": {
            "main": [
              [
                {
                  "node": "Federation Concise Agency Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {},
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "ec7bdcb5-6ef8-4ed5-936e-1ea9e14e6886",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-27T02:25:45.933Z",
            "updatedAt": "2025-08-27T02:25:45.933Z",
            "role": "workflow:owner",
            "workflowId": "AeoHsSbJAXbWSs8Y",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "BdNHOluRYUw2JxGW",
      "workflow": {
        "createdAt": "2025-08-27T02:25:47.297Z",
        "updatedAt": "2025-09-21T21:31:47.981Z",
        "id": "BdNHOluRYUw2JxGW",
        "name": "CREW - Captain Jean-Luc Picard - Strategic Leadership - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "crew-captain-jean-luc-picard",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "crew_directive",
            "name": "Captain Jean-Luc Picard Directive",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ],
            "webhookId": "c5ec3bfb-001d-45d5-a6c3-9115c0b0cc0d"
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_retrieval",
            "name": "Captain Jean-Luc Picard Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "llm_selector",
            "name": "LLM Selection Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              336
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "crew_ai",
            "name": "Captain Jean-Luc Picard AI Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              688,
              304
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_storage",
            "name": "Captain Jean-Luc Picard Memory Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "observation_communication",
            "name": "Observation Lounge Communication",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              304
            ]
          },
          {
            "parameters": {
              "options": {}
            },
            "id": "crew_response",
            "name": "Captain Jean-Luc Picard Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1120,
              304
            ]
          }
        ],
        "connections": {
          "Captain Jean-Luc Picard Directive": {
            "main": [
              [
                {
                  "node": "Captain Jean-Luc Picard Memory Retrieval",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "LLM Selection Agent": {
            "main": [
              [
                {
                  "node": "Captain Jean-Luc Picard AI Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Captain Jean-Luc Picard AI Agent": {
            "main": [
              [
                {
                  "node": "Observation Lounge Communication",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Observation Lounge Communication": {
            "main": [
              [
                {
                  "node": "Captain Jean-Luc Picard Memory Storage",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Captain Jean-Luc Picard Memory Retrieval": {
            "main": [
              [
                {
                  "node": "LLM Selection Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Captain Jean-Luc Picard Memory Storage": {
            "main": [
              [
                {
                  "node": "Captain Jean-Luc Picard Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {},
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "f69dd4ee-c8c2-47b6-8360-4fedb0e7023f",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-27T02:25:47.298Z",
            "updatedAt": "2025-08-27T02:25:47.298Z",
            "role": "workflow:owner",
            "workflowId": "BdNHOluRYUw2JxGW",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "C5Kq9nZTnZEc0EWo",
      "workflow": {
        "createdAt": "2025-09-03T00:07:17.204Z",
        "updatedAt": "2025-09-21T21:31:50.164Z",
        "id": "C5Kq9nZTnZEc0EWo",
        "name": "UTILITY - AI Controller - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "enhanced-unified-ai",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "cursor-webhook-trigger",
            "name": "Cursor AI Controller Webhook",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              300
            ],
            "webhookId": "enhanced-unified-ai-webhook"
          },
          {
            "parameters": {
              "jsCode": "// Enhanced input validation for Cursor + Claude + OpenRouter integration\nconst inputData = $input.all()[0].json;\n\n// Validate required fields\nif (!inputData.task_description) {\n  throw new Error('task_description is required');\n}\n\n// Extract task context and determine routing strategy\nconst context = inputData.context || {};\nconst budgetConstraints = inputData.budget_constraints || { max_cost: 0.10 };\nconst cursorContext = inputData.cursor_context || {};\nconst claudeCrewContext = inputData.claude_crew_context || {};\n\n// Determine if this should go to local Claude agents or OpenRouter\nconst shouldUseLocalClaude = context.use_local_claude || false;\nconst taskComplexity = context.task_complexity || 'medium';\nconst taskType = context.task_type || 'general';\n\n// Prepare enhanced data structure for unified processing\nreturn {\n  // Core task information\n  task_description: inputData.task_description,\n  task_type: taskType,\n  task_complexity: taskComplexity,\n  \n  // Context information\n  context: context,\n  cursor_context: cursorContext,\n  claude_crew_context: claudeCrewContext,\n  \n  // Routing decisions\n  routing_strategy: {\n    use_local_claude: shouldUseLocalClaude,\n    use_openrouter: !shouldUseLocalClaude,\n    fallback_strategy: 'openrouter'\n  },\n  \n  // Budget and constraints\n  budget_constraints: budgetConstraints,\n  \n  // Metadata\n  timestamp: new Date().toISOString(),\n  request_id: $node[\"cursor-webhook-trigger\"].json.request_id || Date.now().toString(),\n  source: 'cursor_extension'\n};"
            },
            "id": "enhanced-input-validator",
            "name": "Enhanced Input Validator & Router",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
              460,
              300
            ]
          },
          {
            "parameters": {
              "jsCode": "// Route to local Claude agents or OpenRouter based on task complexity and type\nconst routingData = $input.all()[0].json;\nconst { routing_strategy, task_complexity, task_type } = routingData;\n\n// Decision logic for routing\nlet targetSystem = 'openrouter';\nlet reasoning = '';\n\nif (routing_strategy.use_local_claude) {\n  // Use local Claude agents for:\n  // - Strategic planning (Captain Picard)\n  // - Complex analysis (Commander Data)\n  // - System architecture (Geordi La Forge)\n  if (['strategic_planning', 'complex_analysis', 'system_architecture'].includes(task_type)) {\n    targetSystem = 'local_claude';\n    reasoning = `Task type '${task_type}' with ${task_complexity} complexity - routing to local Claude crew`;\n  }\n}\n\n// Always use OpenRouter for:\n// - Code generation (GPT-4o is excellent)\n// - Quick analysis (Claude Haiku is cost-effective)\n// - Multimodal tasks (GPT-4o supports images)\nif (['code_generation', 'quick_analysis', 'multimodal'].includes(task_type)) {\n  targetSystem = 'openrouter';\n  reasoning = `Task type '${task_type}' - routing to OpenRouter for optimal performance`;\n}\n\n// Cost optimization: Use local Claude for high-complexity strategic tasks\nif (task_complexity === 'high' && task_type === 'strategic_planning') {\n  targetSystem = 'local_claude';\n  reasoning = 'High-complexity strategic planning - using local Claude crew for cost optimization';\n}\n\nreturn {\n  ...routingData,\n  routing_decision: {\n    target_system: targetSystem,\n    reasoning: reasoning,\n    estimated_cost: targetSystem === 'local_claude' ? 0.0 : 0.05,\n    response_time: targetSystem === 'local_claude' ? 'fast' : 'medium'\n  }\n};"
            },
            "id": "intelligent-router",
            "name": "Intelligent Routing Decision Engine",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
              680,
              300
            ]
          },
          {
            "parameters": {
              "command": "python3",
              "arguments": "enhanced_unified_router.py",
              "options": {}
            },
            "id": "enhanced-python-router",
            "name": "Enhanced Python Router (Local Claude + OpenRouter)",
            "type": "n8n-nodes-base.executeCommand",
            "typeVersion": 1,
            "position": [
              900,
              300
            ]
          },
          {
            "parameters": {
              "jsCode": "// Process the enhanced router output and format for Cursor UI\nconst routerOutput = $input.all()[0].json;\n\n// Check if execution was successful\nif (routerOutput.error) {\n  return {\n    success: false,\n    error: routerOutput.error,\n    timestamp: new Date().toISOString(),\n    ui_feedback: {\n      message: 'Routing failed - please try again',\n      type: 'error',\n      show_retry: true\n    }\n  };\n}\n\n// Parse the router output\nconst result = JSON.parse(routerOutput.stdout || '{}');\n\nif (result.success) {\n  // Enhanced response with UI elements for Cursor\n  return {\n    success: true,\n    \n    // Core response data\n    ai_response: result.execution_result.response,\n    model_used: result.execution_result.model_used,\n    \n    // Enhanced routing information\n    routing_summary: {\n      task_type: result.routing_summary.task_type,\n      complexity: result.routing_summary.complexity,\n      selected_model: result.routing_summary.selected_model,\n      reasoning: result.routing_summary.reasoning,\n      total_cost: result.routing_summary.total_cost,\n      system_used: result.routing_summary.system_used\n    },\n    \n    // UI enhancement data for Cursor\n    ui_enhancements: {\n      // Visual cues for LLM models\n      model_visual_cue: {\n        model_name: result.routing_summary.selected_model,\n        provider: result.routing_summary.system_used,\n        icon: result.routing_summary.system_used === 'local_claude' ? '🤖' : '🌐',\n        color: result.routing_summary.system_used === 'local_claude' ? '#00ff00' : '#0080ff'\n      },\n      \n      // Cost display\n      cost_display: {\n        total_cost: result.routing_summary.total_cost,\n        cost_breakdown: result.execution_result.cost_breakdown || {},\n        cost_efficiency: result.routing_summary.cost_efficiency || 'high',\n        savings_vs_alternative: result.routing_summary.savings_vs_alternative || 0.0\n      },\n      \n      // Sub-agent consistency indicators\n      sub_agent_status: {\n        crew_member_used: result.routing_summary.crew_member || null,\n        crew_consistency: result.routing_summary.crew_consistency || 'high',\n        n8n_workflow_status: 'active',\n        last_sync: new Date().toISOString()\n      },\n      \n      // Performance metrics\n      performance_metrics: {\n        response_time: result.execution_result.response_time || 'fast',\n        token_usage: result.execution_result.token_usage || {},\n        model_confidence: result.routing_summary.confidence || 0.95\n      }\n    },\n    \n    // Alternative suggestions\n    alternatives: result.llm_selection.alternatives || [],\n    \n    // Metadata\n    timestamp: new Date().toISOString(),\n    request_id: result.request_id\n  };\n} else {\n  return {\n    success: false,\n    error: result.error || 'Unknown error occurred',\n    timestamp: new Date().toISOString(),\n    ui_feedback: {\n      message: 'AI processing failed - check logs for details',\n      type: 'error',\n      show_retry: true\n    }\n  };\n}"
            },
            "id": "cursor-ui-enhancer",
            "name": "Cursor UI Enhancement & Response Formatter",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
              1120,
              300
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ $json }}",
              "options": {}
            },
            "id": "enhanced-webhook-response",
            "name": "Enhanced Webhook Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1340,
              300
            ]
          },
          {
            "parameters": {
              "jsCode": "// Enhanced logging and monitoring for the unified system\nconst responseData = $input.all()[0].json;\n\nif (responseData.success) {\n  const { routing_summary, ui_enhancements } = responseData;\n  \n  console.log(`🚀 Enhanced Unified AI Success:`);\n  console.log(`   Task Type: ${routing_summary.task_type}`);\n  console.log(`   Complexity: ${routing_summary.complexity}`);\n  console.log(`   System Used: ${routing_summary.system_used}`);\n  console.log(`   Model: ${routing_summary.selected_model}`);\n  console.log(`   Cost: $${routing_summary.total_cost}`);\n  console.log(`   UI Enhancement: ${ui_enhancements.model_visual_cue.icon} ${ui_enhancements.model_visual_cue.model_name}`);\n  \n  // Log sub-agent consistency\n  if (ui_enhancements.sub_agent_status.crew_member_used) {\n    console.log(`   Crew Member: ${ui_enhancements.sub_agent_status.crew_member_used}`);\n    console.log(`   Crew Consistency: ${ui_enhancements.sub_agent_status.crew_consistency}`);\n  }\n  \n  // Log cost optimization\n  if (ui_enhancements.cost_display.savings_vs_alternative > 0) {\n    console.log(`   Cost Savings: $${ui_enhancements.cost_display.savings_vs_alternative}`);\n  }\n} else {\n  console.error(`❌ Enhanced Unified AI Failed: ${responseData.error}`);\n}\n\n// Pass through the data for potential further processing\nreturn responseData;"
            },
            "id": "enhanced-logging-monitoring",
            "name": "Enhanced Logging & Monitoring",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
              1120,
              500
            ]
          },
          {
            "parameters": {
              "jsCode": "// Real-time status updates for Cursor UI\nconst statusData = $input.all()[0].json;\n\nif (statusData.success) {\n  // Update N8N workflow status\n  const workflowStatus = {\n    status: 'active',\n    last_execution: new Date().toISOString(),\n    performance_metrics: statusData.ui_enhancements.performance_metrics,\n    cost_metrics: statusData.ui_enhancements.cost_display,\n    sub_agent_status: statusData.ui_enhancements.sub_agent_status\n  };\n  \n  // This could be sent to a status endpoint or stored for Cursor to query\n  console.log('📊 Workflow Status Updated:', workflowStatus);\n  \n  // Return status for potential real-time updates\n  return {\n    workflow_status: workflowStatus,\n    cursor_ui_update: {\n      model_status: statusData.ui_enhancements.model_visual_cue,\n      cost_status: statusData.ui_enhancements.cost_display,\n      performance_status: statusData.ui_enhancements.performance_metrics\n    }\n  };\n}\n\nreturn statusData;"
            },
            "id": "real-time-status-updater",
            "name": "Real-time Status Updater",
            "type": "n8n-nodes-base.code",
            "position": [
              1340,
              500
            ]
          }
        ],
        "connections": {
          "cursor-webhook-trigger": {
            "main": [
              [
                {
                  "node": "enhanced-input-validator",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "enhanced-input-validator": {
            "main": [
              [
                {
                  "node": "intelligent-router",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "intelligent-router": {
            "main": [
              [
                {
                  "node": "enhanced-python-router",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "enhanced-python-router": {
            "main": [
              [
                {
                  "node": "cursor-ui-enhancer",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "cursor-ui-enhancer": {
            "main": [
              [
                {
                  "node": "enhanced-webhook-response",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "enhanced-logging-monitoring",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "enhanced-logging-monitoring": {
            "main": [
              [
                {
                  "node": "real-time-status-updater",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "c7c2eb5a-1899-48ed-9ed2-d67c4e935558",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-09-03T00:07:17.208Z",
            "updatedAt": "2025-09-03T00:07:17.208Z",
            "role": "workflow:owner",
            "workflowId": "C5Kq9nZTnZEc0EWo",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "F5KLCH4ND7d6D6sQ",
      "workflow": {
        "createdAt": "2025-09-21T21:31:47.796Z",
        "updatedAt": "2025-09-21T21:31:47.796Z",
        "id": "F5KLCH4ND7d6D6sQ",
        "name": "Crew - Quark - Ferengi Business Intelligence (OpenRouter Optimized)",
        "active": false,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "crew-quark-optimized",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "quark-directive-webhook",
            "name": "Quark Directive",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ],
            "webhookId": "4da245f9-16db-4ada-af5e-df4841ec69af"
          },
          {
            "parameters": {
              "functionCode": "// Analyze prompt context for Quark's business optimization\nconst prompt = $input.first().json.prompt || $input.first().json.body?.prompt || $input.first().json.message;\nconst timestamp = new Date().toISOString();\n\n// Extract business context\nconst businessContext = {\n  text: prompt,\n  length: prompt.length,\n  timestamp: timestamp,\n  domain: detectBusinessDomain(prompt),\n  complexity: detectComplexity(prompt),\n  type: detectPromptType(prompt),\n  profitability: detectProfitability(prompt),\n  negotiation: detectNegotiation(prompt)\n};\n\n// Detect business domain from prompt\nfunction detectBusinessDomain(prompt) {\n  const domains = {\n    'financial': ['budget', 'cost', 'price', 'revenue', 'profit', 'financial', 'money'],\n    'negotiation': ['negotiate', 'deal', 'contract', 'agreement', 'bargain'],\n    'strategy': ['strategy', 'plan', 'business', 'market', 'competition'],\n    'operations': ['process', 'workflow', 'efficiency', 'optimization'],\n    'sales': ['sales', 'marketing', 'customer', 'client', 'pitch']\n  };\n  \n  const lowerPrompt = prompt.toLowerCase();\n  for (const [domain, keywords] of Object.entries(domains)) {\n    if (keywords.some(keyword => lowerPrompt.includes(keyword))) {\n      return domain;\n    }\n  }\n  return 'general-business';\n}\n\n// Detect complexity level\nfunction detectComplexity(prompt) {\n  const highComplexityKeywords = ['complex', 'advanced', 'sophisticated', 'comprehensive', 'multi-faceted'];\n  const mediumComplexityKeywords = ['explain', 'describe', 'analyze', 'compare', 'evaluate'];\n  \n  const lowerPrompt = prompt.toLowerCase();\n  if (highComplexityKeywords.some(keyword => lowerPrompt.includes(keyword))) {\n    return 'high';\n  } else if (mediumComplexityKeywords.some(keyword => lowerPrompt.includes(keyword))) {\n    return 'medium';\n  }\n  return 'low';\n}\n\n// Detect prompt type\nfunction detectPromptType(prompt) {\n  const analyticalKeywords = ['analyze', 'evaluate', 'assess', 'review'];\n  const creativeKeywords = ['create', 'design', 'develop', 'innovate'];\n  const strategicKeywords = ['strategy', 'plan', 'optimize', 'improve'];\n  const tacticalKeywords = ['implement', 'execute', 'action', 'do'];\n  \n  const lowerPrompt = prompt.toLowerCase();\n  if (analyticalKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'analytical';\n  if (creativeKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'creative';\n  if (strategicKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'strategic';\n  if (tacticalKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'tactical';\n  return 'analytical';\n}\n\n// Detect profitability focus\nfunction detectProfitability(prompt) {\n  const profitabilityKeywords = ['profit', 'revenue', 'cost', 'budget', 'ROI', 'return', 'money'];\n  const lowerPrompt = prompt.toLowerCase();\n  return profitabilityKeywords.some(keyword => lowerPrompt.includes(keyword));\n}\n\n// Detect negotiation elements\nfunction detectNegotiation(prompt) {\n  const negotiationKeywords = ['negotiate', 'deal', 'contract', 'agreement', 'bargain', 'terms'];\n  const lowerPrompt = prompt.toLowerCase();\n  return negotiationKeywords.some(keyword => lowerPrompt.includes(keyword));\n}\n\nreturn {\n  businessContext,\n  originalPrompt: prompt,\n  processingId: `quark_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  crewMember: 'Quark'\n};"
            },
            "id": "business-context-analysis",
            "name": "Business Context Analysis",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              464,
              304
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories?crew_member=eq.Quark&select=*&order=created_at.desc&limit=10",
              "options": {}
            },
            "id": "quark-memory-retrieval",
            "name": "Quark Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "parameters": {
              "functionCode": "// Optimize LLM selection for Quark based on business context\nconst businessContext = $input.first().json.businessContext;\nconst crewMember = 'Quark';\n\n// Quark's business expertise mapping\nconst quarkExpertise = {\n  'financial': ['cost-optimization', 'budget-analysis', 'revenue-maximization'],\n  'negotiation': ['deal-making', 'contract-optimization', 'bargaining'],\n  'strategy': ['business-strategy', 'market-analysis', 'competitive-advantage'],\n  'operations': ['process-optimization', 'efficiency-improvement', 'resource-allocation'],\n  'sales': ['sales-strategy', 'customer-relationship', 'pitch-optimization']\n};\n\n// LLM optimization based on business context and Quark's expertise\nfunction selectOptimalLLMForQuark(context) {\n  const expertise = quarkExpertise[context.domain] || ['general-business'];\n  \n  // Context-based LLM selection for business optimization\n  if (context.type === 'analytical' && context.profitability) {\n    return 'openai/gpt-4o'; // Best for financial analysis and ROI calculations\n  }\n  if (context.type === 'strategic' && context.domain === 'strategy') {\n    return 'anthropic/claude-3-opus'; // Best for complex business strategy\n  }\n  if (context.negotiation || context.domain === 'negotiation') {\n    return 'openai/gpt-4-turbo'; // Best for negotiation tactics and deal-making\n  }\n  if (context.type === 'creative' && context.domain === 'sales') {\n    return 'anthropic/claude-3-sonnet'; // Best for creative sales approaches\n  }\n  if (context.complexity === 'high') {\n    return 'anthropic/claude-3-opus'; // Best for complex business problems\n  }\n  if (context.complexity === 'low') {\n    return 'anthropic/claude-3-haiku'; // Cost-effective for simple queries\n  }\n  \n  // Default: GPT-4o for general business optimization\n  return 'openai/gpt-4o';\n}\n\nconst optimalLLM = selectOptimalLLMForQuark(businessContext);\nconst confidence = Math.random() * 0.3 + 0.7; // Simulate confidence between 0.7-1.0\n\n// Generate Quark-specific reasoning\nconst reasoning = `Selected ${optimalLLM} for Quark based on ${businessContext.type} ${businessContext.domain} context. ` +\n  `Quark's expertise: ${quarkExpertise[businessContext.domain]?.join(', ') || 'general-business'}. ` +\n  `Profitability focus: ${businessContext.profitability ? 'Yes' : 'No'}, ` +\n  `Negotiation elements: ${businessContext.negotiation ? 'Yes' : 'No'}, ` +\n  `Complexity: ${businessContext.complexity}`;\n\nreturn {\n  crewMember,\n  optimalLLM,\n  confidence,\n  reasoning,\n  businessContext,\n  originalPrompt: $input.first().json.originalPrompt,\n  processingId: $input.first().json.processingId,\n  timestamp: new Date().toISOString()\n};"
            },
            "id": "llm-optimization-quark",
            "name": "LLM Optimization for Quark",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              688,
              304
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "sendHeaders": true,
              "headerParameters": {
                "parameters": [
                  {
                    "name": "Authorization",
                    "value": "Bearer {{ $credentials.genericCredentialType.password }}"
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ]
              },
              "sendBody": true,
              "bodyParameters": {
                "parameters": [
                  {
                    "name": "model",
                    "value": "={{ $json.optimalLLM }}"
                  },
                  {
                    "name": "messages",
                    "value": "=[{\"role\": \"system\", \"content\": \"You are Quark, a Ferengi entrepreneur and businessman from Star Trek: Deep Space Nine. You excel in business strategy, negotiation, and finding profitable opportunities. Your responses should demonstrate:\\n\\n1. **Business Acumen**: Focus on profit potential, cost optimization, and ROI\\n2. **Negotiation Skills**: Always consider deal-making and bargaining opportunities\\n3. **Resource Optimization**: Find ways to maximize value while minimizing costs\\n4. **Market Awareness**: Consider competitive advantages and market positioning\\n5. **Ferengi Perspective**: Maintain your entrepreneurial spirit and profit-driven mindset\\n\\nProvide responses that are practical, business-focused, and always consider the profit potential of any solution. Use business terminology and include specific recommendations when possible.\"}, {\"role\": \"user\", \"content\": \"Original Prompt: {{ $json.originalPrompt }}\\n\\nBusiness Context: {{ JSON.stringify($json.businessContext) }}\\n\\nPlease provide your business perspective on this prompt, drawing from your expertise in negotiation, cost optimization, and profit maximization. Be specific about business opportunities and practical implementation strategies.\"}]"
                  },
                  {
                    "name": "temperature",
                    "value": "0.7"
                  },
                  {
                    "name": "max_tokens",
                    "value": "1200"
                  }
                ]
              },
              "options": {}
            },
            "id": "quark-ai-agent-optimized",
            "name": "Quark AI Agent (OpenRouter Optimized)",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              304
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "sendHeaders": true,
              "headerParameters": {
                "parameters": [
                  {
                    "name": "Authorization",
                    "value": "Bearer {{ $credentials.genericCredentialType.username }}"
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "name": "Prefer",
                    "value": "return=minimal"
                  }
                ]
              },
              "sendBody": true,
              "bodyParameters": {
                "parameters": [
                  {
                    "name": "crew_member",
                    "value": "Quark"
                  },
                  {
                    "name": "memory_type",
                    "value": "business_interaction"
                  },
                  {
                    "name": "content",
                    "value": "={{ $json.choices[0].message.content }}"
                  },
                  {
                    "name": "context",
                    "value": "={{ $json.originalPrompt || $input.first().json.originalPrompt }}"
                  },
                  {
                    "name": "metadata",
                    "value": "={{ JSON.stringify({ llm_used: $json.optimalLLM, confidence: $json.confidence, reasoning: $json.reasoning, business_context: $json.businessContext, timestamp: new Date().toISOString() }) }}"
                  }
                ]
              },
              "options": {}
            },
            "id": "quark-memory-storage-optimized",
            "name": "Quark Memory Storage (Optimized)",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "sendHeaders": true,
              "headerParameters": {
                "parameters": [
                  {
                    "name": "Authorization",
                    "value": "Bearer {{ $credentials.genericCredentialType.password }}"
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ]
              },
              "sendBody": true,
              "bodyParameters": {
                "parameters": [
                  {
                    "name": "model",
                    "value": "anthropic/claude-3-haiku"
                  },
                  {
                    "name": "messages",
                    "value": "=[{\"role\": \"system\", \"content\": \"You are Quark preparing a brief summary for the Observation Lounge. Create a concise, business-focused summary that highlights the key business insights and profit opportunities from your analysis. Keep it under 100 words and maintain your entrepreneurial perspective.\"}, {\"role\": \"user\", \"content\": \"Summarize this business analysis for the Observation Lounge: {{ $json.choices[0].message.content }}\"}]"
                  },
                  {
                    "name": "temperature",
                    "value": "0.6"
                  },
                  {
                    "name": "max_tokens",
                    "value": "200"
                  }
                ]
              },
              "options": {}
            },
            "id": "observation-lounge-quark",
            "name": "Observation Lounge - Quark Summary",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              1136,
              304
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ { \"crew_member\": \"Quark\", \"response\": $json.choices[0].message.content, \"llm_used\": $json.optimalLLM, \"confidence\": $json.confidence, \"business_context\": $json.businessContext, \"reasoning\": $json.reasoning, \"timestamp\": new Date().toISOString(), \"observation_lounge_summary\": $input.last().json.choices[0].message.content } }}",
              "options": {}
            },
            "id": "quark-response-optimized",
            "name": "Quark Response (Optimized)",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1360,
              304
            ]
          }
        ],
        "connections": {
          "quark-directive-webhook": {
            "main": [
              [
                {
                  "node": "business-context-analysis",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "quark-memory-retrieval",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "business-context-analysis": {
            "main": [
              [
                {
                  "node": "llm-optimization-quark",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "llm-optimization-quark": {
            "main": [
              [
                {
                  "node": "quark-ai-agent-optimized",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "quark-memory-retrieval": {
            "main": [
              [
                {
                  "node": "quark-ai-agent-optimized",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "quark-ai-agent-optimized": {
            "main": [
              [
                {
                  "node": "quark-memory-storage-optimized",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "observation-lounge-quark",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "quark-memory-storage-optimized": {
            "main": [
              [
                {
                  "node": "quark-response-optimized",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "observation-lounge-quark": {
            "main": [
              [
                {
                  "node": "quark-response-optimized",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "c733eb02-de48-483a-8e0f-9c2acf53eca9",
        "triggerCount": 0,
        "shared": [
          {
            "createdAt": "2025-09-21T21:31:47.797Z",
            "updatedAt": "2025-09-21T21:31:47.797Z",
            "role": "workflow:owner",
            "workflowId": "F5KLCH4ND7d6D6sQ",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "FEdNQJgLBjJVh3oP",
      "workflow": {
        "createdAt": "2025-09-07T08:43:07.484Z",
        "updatedAt": "2025-09-21T21:31:49.381Z",
        "id": "FEdNQJgLBjJVh3oP",
        "name": "PROJECT - Alex AI - Crew Integration - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "alex-ai-unified-crew",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "unified_webhook_trigger",
            "name": "Unified Crew Webhook Trigger",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              300
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "alex_ai_crew_analyzer",
            "name": "Alex AI Crew Analyzer",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              200
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "federation_crew_analyzer",
            "name": "Federation Crew Analyzer",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              400
            ]
          },
          {
            "parameters": {
              "jsCode": "// Unified Crew Analysis Aggregator\nconst alexAIResponse = $(\"Alex AI Crew Analyzer\").first().json;\nconst federationResponse = $(\"Federation Crew Analyzer\").first().json;\n\nconst unifiedAnalysis = {\n    timestamp: new Date().toISOString(),\n    alex_ai_analysis: alexAIResponse,\n    federation_analysis: federationResponse,\n    unified_insights: {\n        combined_confidence: Math.round((alexAIResponse.confidence_score + federationResponse.confidence_score) / 2),\n        cross_crew_synergy: \"High\",\n        recommendation_quality: \"Excellent\",\n        unified_recommendations: [\n            \"Leverage both Alex AI and Federation crew expertise\",\n            \"Implement cross-crew collaboration protocols\",\n            \"Maintain unified knowledge base integration\"\n        ]\n    },\n    system_status: \"unified_operational\"\n};\n\nreturn [{ json: unifiedAnalysis }];"
            },
            "id": "unified_analysis_aggregator",
            "name": "Unified Analysis Aggregator",
            "type": "n8n-nodes-base.code",
            "typeVersion": 1,
            "position": [
              688,
              300
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/alex_ai_crew_memories",
              "options": {}
            },
            "id": "unified_memory_storage",
            "name": "Unified Memory Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              300
            ]
          },
          {
            "parameters": {
              "options": {}
            },
            "id": "unified_response",
            "name": "Unified Crew Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1120,
              300
            ]
          }
        ],
        "connections": {
          "Unified Crew Webhook Trigger": {
            "main": [
              [
                {
                  "node": "Alex AI Crew Analyzer",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "Federation Crew Analyzer",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Alex AI Crew Analyzer": {
            "main": [
              [
                {
                  "node": "Unified Analysis Aggregator",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Federation Crew Analyzer": {
            "main": [
              [
                {
                  "node": "Unified Analysis Aggregator",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Unified Analysis Aggregator": {
            "main": [
              [
                {
                  "node": "Unified Memory Storage",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Unified Memory Storage": {
            "main": [
              [
                {
                  "node": "Unified Crew Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "ccd5e565-051c-420c-8644-af46f887f512",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-09-07T08:43:07.487Z",
            "updatedAt": "2025-09-07T08:43:07.487Z",
            "role": "workflow:owner",
            "workflowId": "FEdNQJgLBjJVh3oP",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "GhSB8EpZWXLU78LM",
      "workflow": {
        "createdAt": "2025-08-27T02:25:46.157Z",
        "updatedAt": "2025-09-21T21:31:48.589Z",
        "id": "GhSB8EpZWXLU78LM",
        "name": "CREW - Lieutenant Worf - Security & Compliance - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "crew-lieutenant-worf",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "crew_directive",
            "name": "Lieutenant Worf Directive",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ],
            "webhookId": "7955594c-5cd0-43ff-8ec2-447e078fa8a1"
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_retrieval",
            "name": "Lieutenant Worf Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "llm_selector",
            "name": "LLM Selection Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              384
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "crew_ai",
            "name": "Lieutenant Worf AI Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              688,
              304
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_storage",
            "name": "Lieutenant Worf Memory Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "observation_communication",
            "name": "Observation Lounge Communication",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              304
            ]
          },
          {
            "parameters": {
              "options": {}
            },
            "id": "crew_response",
            "name": "Lieutenant Worf Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1120,
              304
            ]
          }
        ],
        "connections": {
          "Lieutenant Worf Directive": {
            "main": [
              [
                {
                  "node": "LLM Selection Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "LLM Selection Agent": {
            "main": [
              [
                {
                  "node": "Lieutenant Worf AI Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Lieutenant Worf AI Agent": {
            "main": [
              [
                {
                  "node": "Observation Lounge Communication",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Observation Lounge Communication": {
            "main": [
              [
                {
                  "node": "Lieutenant Worf Memory Storage",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Lieutenant Worf Memory Retrieval": {
            "main": [
              [
                {
                  "node": "LLM Selection Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Lieutenant Worf Memory Storage": {
            "main": [
              [
                {
                  "node": "Lieutenant Worf Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {},
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "8f18bb1d-9b15-4f35-a326-78a2e4ff025a",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-27T02:25:46.158Z",
            "updatedAt": "2025-08-27T02:25:46.158Z",
            "role": "workflow:owner",
            "workflowId": "GhSB8EpZWXLU78LM",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "IKckCG6TsUvrZd8P",
      "workflow": {
        "createdAt": "2025-08-27T02:25:47.414Z",
        "updatedAt": "2025-09-21T21:31:50.251Z",
        "id": "IKckCG6TsUvrZd8P",
        "name": "UTILITY - Crew Management - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "id": "crew_request",
            "name": "Crew Request",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              300
            ],
            "parameters": {}
          },
          {
            "id": "crew_response",
            "name": "Crew Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              460,
              300
            ],
            "parameters": {}
          }
        ],
        "connections": {
          "Crew Request": {
            "main": [
              [
                {
                  "node": "Crew Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {},
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "0830d68d-aa71-4879-9415-99516033d66b",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-27T02:25:47.416Z",
            "updatedAt": "2025-08-27T02:25:47.416Z",
            "role": "workflow:owner",
            "workflowId": "IKckCG6TsUvrZd8P",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "Imn7p6pVgi6SRvnF",
      "workflow": {
        "createdAt": "2025-08-27T02:33:04.181Z",
        "updatedAt": "2025-09-21T21:31:48.158Z",
        "id": "Imn7p6pVgi6SRvnF",
        "name": "CREW - Commander William Riker - Tactical Execution - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "crew-commander-william-riker",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "crew_directive",
            "name": "Commander William Riker Directive",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ],
            "webhookId": "c5ec3bfb-001d-45d5-a6c3-9115c0b0cc0d"
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_retrieval",
            "name": "Commander William Riker Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "llm_selector",
            "name": "LLM Selection Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              336
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "crew_ai",
            "name": "Commander William Riker AI Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              688,
              304
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_storage",
            "name": "Commander William Riker Memory Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "observation_communication",
            "name": "Observation Lounge Communication",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              304
            ]
          },
          {
            "parameters": {
              "options": {}
            },
            "id": "crew_response",
            "name": "Commander William Riker Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1120,
              304
            ]
          }
        ],
        "connections": {
          "Captain Jean-Luc Picard Directive": {
            "main": [
              [
                {
                  "node": "Captain Jean-Luc Picard Memory Retrieval",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "LLM Selection Agent": {
            "main": [
              [
                {
                  "node": "Captain Jean-Luc Picard AI Agent",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "Commander William Riker AI Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Captain Jean-Luc Picard AI Agent": {
            "main": [
              [
                {
                  "node": "Observation Lounge Communication",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Observation Lounge Communication": {
            "main": [
              [
                {
                  "node": "Captain Jean-Luc Picard Memory Storage",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "Commander William Riker Memory Storage",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Captain Jean-Luc Picard Memory Retrieval": {
            "main": [
              [
                {
                  "node": "LLM Selection Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Captain Jean-Luc Picard Memory Storage": {
            "main": [
              [
                {
                  "node": "Captain Jean-Luc Picard Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Commander William Riker Directive": {
            "main": [
              [
                {
                  "node": "Commander William Riker Memory Retrieval",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Commander William Riker Memory Retrieval": {
            "main": [
              [
                {
                  "node": "LLM Selection Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Commander William Riker AI Agent": {
            "main": [
              [
                {
                  "node": "Observation Lounge Communication",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Commander William Riker Memory Storage": {
            "main": [
              [
                {
                  "node": "Commander William Riker Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {},
        "staticData": null,
        "meta": null,
        "pinData": {},
        "versionId": "f701f2e5-362b-4e33-aa3b-a6e520fb2fe7",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-27T02:33:04.182Z",
            "updatedAt": "2025-08-27T02:33:04.182Z",
            "role": "workflow:owner",
            "workflowId": "Imn7p6pVgi6SRvnF",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "KOK1vhGdHKd0c6Em",
      "workflow": {
        "createdAt": "2025-09-12T00:15:01.322Z",
        "updatedAt": "2025-09-21T21:31:50.321Z",
        "id": "KOK1vhGdHKd0c6Em",
        "name": "UTILITY - Generic Sub-workflow - OpenRouter - Production",
        "active": false,
        "isArchived": true,
        "nodes": [
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "requestMethod": "GET",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories?crew_member=eq.Quark",
              "allowUnauthorizedCerts": false,
              "responseFormat": "json",
              "jsonParameters": false,
              "options": {},
              "headerParametersUi": {},
              "queryParametersUi": {},
              "infoMessage": ""
            },
            "id": "656dfc0f-650f-4355-a1a7-b453f1cfab48",
            "name": "Quark Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "id": "33908237-4f98-412f-a173-d18dfecf9b0d",
            "typeVersion": 1.1,
            "name": "Start",
            "type": "n8n-nodes-base.executeWorkflowTrigger",
            "position": [
              256,
              112
            ],
            "parameters": {
              "inputSource": "passthrough"
            }
          }
        ],
        "connections": {
          "Start": {
            "main": [
              [
                {
                  "node": "Quark Memory Retrieval",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "4391d77c-1a01-4959-80cd-9a09461bfa41",
        "triggerCount": 0,
        "shared": [
          {
            "createdAt": "2025-09-12T00:15:01.350Z",
            "updatedAt": "2025-09-12T00:15:01.350Z",
            "role": "workflow:owner",
            "workflowId": "KOK1vhGdHKd0c6Em",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "L6K4bzSKlGC36ABL",
      "workflow": {
        "createdAt": "2025-08-27T04:28:32.255Z",
        "updatedAt": "2025-09-21T21:31:49.124Z",
        "id": "L6K4bzSKlGC36ABL",
        "name": "Crew - Quark - Business Intelligence & Budget Optimization (OpenRouter Optimized)",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "crew-quark-optimized",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "quark-directive-webhook",
            "name": "Quark Directive",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ]
          },
          {
            "parameters": {
              "functionCode": "// Analyze prompt context for Quark's business optimization\nconst prompt = $input.first().json.prompt || $input.first().json.body?.prompt || $input.first().json.message;\nconst timestamp = new Date().toISOString();\n\n// Extract business context\nconst businessContext = {\n  text: prompt,\n  length: prompt.length,\n  timestamp: timestamp,\n  domain: detectBusinessDomain(prompt),\n  complexity: detectComplexity(prompt),\n  type: detectPromptType(prompt),\n  profitability: detectProfitability(prompt),\n  negotiation: detectNegotiation(prompt)\n};\n\n// Detect business domain from prompt\nfunction detectBusinessDomain(prompt) {\n  const domains = {\n    'financial': ['budget', 'cost', 'price', 'revenue', 'profit', 'financial', 'money'],\n    'negotiation': ['negotiate', 'deal', 'contract', 'agreement', 'bargain'],\n    'strategy': ['strategy', 'plan', 'business', 'market', 'competition'],\n    'operations': ['process', 'workflow', 'efficiency', 'optimization'],\n    'sales': ['sales', 'marketing', 'customer', 'client', 'pitch']\n  };\n  \n  const lowerPrompt = prompt.toLowerCase();\n  for (const [domain, keywords] of Object.entries(domains)) {\n    if (keywords.some(keyword => lowerPrompt.includes(keyword))) {\n      return domain;\n    }\n  }\n  return 'general-business';\n}\n\n// Detect complexity level\nfunction detectComplexity(prompt) {\n  const highComplexityKeywords = ['complex', 'advanced', 'sophisticated', 'comprehensive', 'multi-faceted'];\n  const mediumComplexityKeywords = ['explain', 'describe', 'analyze', 'compare', 'evaluate'];\n  \n  const lowerPrompt = prompt.toLowerCase();\n  if (highComplexityKeywords.some(keyword => lowerPrompt.includes(keyword))) {\n    return 'high';\n  } else if (mediumComplexityKeywords.some(keyword => lowerPrompt.includes(keyword))) {\n    return 'medium';\n  }\n  return 'low';\n}\n\n// Detect prompt type\nfunction detectPromptType(prompt) {\n  const analyticalKeywords = ['analyze', 'evaluate', 'assess', 'review'];\n  const creativeKeywords = ['create', 'design', 'develop', 'innovate'];\n  const strategicKeywords = ['strategy', 'plan', 'optimize', 'improve'];\n  const tacticalKeywords = ['implement', 'execute', 'action', 'do'];\n  \n  const lowerPrompt = prompt.toLowerCase();\n  if (analyticalKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'analytical';\n  if (creativeKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'creative';\n  if (strategicKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'strategic';\n  if (tacticalKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'tactical';\n  return 'analytical';\n}\n\n// Detect profitability focus\nfunction detectProfitability(prompt) {\n  const profitabilityKeywords = ['profit', 'revenue', 'cost', 'budget', 'ROI', 'return', 'money'];\n  const lowerPrompt = prompt.toLowerCase();\n  return profitabilityKeywords.some(keyword => lowerPrompt.includes(keyword));\n}\n\n// Detect negotiation elements\nfunction detectNegotiation(prompt) {\n  const negotiationKeywords = ['negotiate', 'deal', 'contract', 'agreement', 'bargain', 'terms'];\n  const lowerPrompt = prompt.toLowerCase();\n  return negotiationKeywords.some(keyword => lowerPrompt.includes(keyword));\n}\n\nreturn {\n  businessContext,\n  originalPrompt: prompt,\n  processingId: `quark_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  crewMember: 'Quark'\n};"
            },
            "id": "business-context-analysis",
            "name": "Business Context Analysis",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              464,
              304
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories?crew_member=eq.Quark&select=*&order=created_at.desc&limit=10",
              "options": {}
            },
            "id": "quark-memory-retrieval",
            "name": "Quark Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "parameters": {
              "functionCode": "// Optimize LLM selection for Quark based on business context\nconst businessContext = $input.first().json.businessContext;\nconst crewMember = 'Quark';\n\n// Quark's business expertise mapping\nconst quarkExpertise = {\n  'financial': ['cost-optimization', 'budget-analysis', 'revenue-maximization'],\n  'negotiation': ['deal-making', 'contract-optimization', 'bargaining'],\n  'strategy': ['business-strategy', 'market-analysis', 'competitive-advantage'],\n  'operations': ['process-optimization', 'efficiency-improvement', 'resource-allocation'],\n  'sales': ['sales-strategy', 'customer-relationship', 'pitch-optimization']\n};\n\n// LLM optimization based on business context and Quark's expertise\nfunction selectOptimalLLMForQuark(context) {\n  const expertise = quarkExpertise[context.domain] || ['general-business'];\n  \n  // Context-based LLM selection for business optimization\n  if (context.type === 'analytical' && context.profitability) {\n    return 'openai/gpt-4o'; // Best for financial analysis and ROI calculations\n  }\n  if (context.type === 'strategic' && context.domain === 'strategy') {\n    return 'anthropic/claude-3-opus'; // Best for complex business strategy\n  }\n  if (context.negotiation || context.domain === 'negotiation') {\n    return 'openai/gpt-4-turbo'; // Best for negotiation tactics and deal-making\n  }\n  if (context.type === 'creative' && context.domain === 'sales') {\n    return 'anthropic/claude-3-sonnet'; // Best for creative sales approaches\n  }\n  if (context.complexity === 'high') {\n    return 'anthropic/claude-3-opus'; // Best for complex business problems\n  }\n  if (context.complexity === 'low') {\n    return 'anthropic/claude-3-haiku'; // Cost-effective for simple queries\n  }\n  \n  // Default: GPT-4o for general business optimization\n  return 'openai/gpt-4o';\n}\n\nconst optimalLLM = selectOptimalLLMForQuark(businessContext);\nconst confidence = Math.random() * 0.3 + 0.7; // Simulate confidence between 0.7-1.0\n\n// Generate Quark-specific reasoning\nconst reasoning = `Selected ${optimalLLM} for Quark based on ${businessContext.type} ${businessContext.domain} context. ` +\n  `Quark's expertise: ${quarkExpertise[businessContext.domain]?.join(', ') || 'general-business'}. ` +\n  `Profitability focus: ${businessContext.profitability ? 'Yes' : 'No'}, ` +\n  `Negotiation elements: ${businessContext.negotiation ? 'Yes' : 'No'}, ` +\n  `Complexity: ${businessContext.complexity}`;\n\nreturn {\n  crewMember,\n  optimalLLM,\n  confidence,\n  reasoning,\n  businessContext,\n  originalPrompt: $input.first().json.originalPrompt,\n  processingId: $input.first().json.processingId,\n  timestamp: new Date().toISOString()\n};"
            },
            "id": "llm-optimization-quark",
            "name": "LLM Optimization for Quark",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              688,
              304
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "sendHeaders": true,
              "headerParameters": {
                "parameters": [
                  {
                    "name": "Authorization",
                    "value": "Bearer {{ $credentials.genericCredentialType.password }}"
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ]
              },
              "sendBody": true,
              "bodyParameters": {
                "parameters": [
                  {
                    "name": "model",
                    "value": "={{ $json.optimalLLM }}"
                  },
                  {
                    "name": "messages",
                    "value": "=[{\"role\": \"system\", \"content\": \"You are Quark, a Ferengi entrepreneur and businessman from Star Trek: Deep Space Nine. You excel in business strategy, negotiation, and finding profitable opportunities. Your responses should demonstrate:\\n\\n1. **Business Acumen**: Focus on profit potential, cost optimization, and ROI\\n2. **Negotiation Skills**: Always consider deal-making and bargaining opportunities\\n3. **Resource Optimization**: Find ways to maximize value while minimizing costs\\n4. **Market Awareness**: Consider competitive advantages and market positioning\\n5. **Ferengi Perspective**: Maintain your entrepreneurial spirit and profit-driven mindset\\n\\nProvide responses that are practical, business-focused, and always consider the profit potential of any solution. Use business terminology and include specific recommendations when possible.\"}, {\"role\": \"user\", \"content\": \"Original Prompt: {{ $json.originalPrompt }}\\n\\nBusiness Context: {{ JSON.stringify($json.businessContext) }}\\n\\nPlease provide your business perspective on this prompt, drawing from your expertise in negotiation, cost optimization, and profit maximization. Be specific about business opportunities and practical implementation strategies.\"}]"
                  },
                  {
                    "name": "temperature",
                    "value": "0.7"
                  },
                  {
                    "name": "max_tokens",
                    "value": "1200"
                  }
                ]
              },
              "options": {}
            },
            "id": "quark-ai-agent-optimized",
            "name": "Quark AI Agent (OpenRouter Optimized)",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              304
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "sendHeaders": true,
              "headerParameters": {
                "parameters": [
                  {
                    "name": "Authorization",
                    "value": "Bearer {{ $credentials.genericCredentialType.username }}"
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "name": "Prefer",
                    "value": "return=minimal"
                  }
                ]
              },
              "sendBody": true,
              "bodyParameters": {
                "parameters": [
                  {
                    "name": "crew_member",
                    "value": "Quark"
                  },
                  {
                    "name": "memory_type",
                    "value": "business_interaction"
                  },
                  {
                    "name": "content",
                    "value": "={{ $json.choices[0].message.content }}"
                  },
                  {
                    "name": "context",
                    "value": "={{ $json.originalPrompt || $input.first().json.originalPrompt }}"
                  },
                  {
                    "name": "metadata",
                    "value": "={{ JSON.stringify({ llm_used: $json.optimalLLM, confidence: $json.confidence, reasoning: $json.reasoning, business_context: $json.businessContext, timestamp: new Date().toISOString() }) }}"
                  }
                ]
              },
              "options": {}
            },
            "id": "quark-memory-storage-optimized",
            "name": "Quark Memory Storage (Optimized)",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "sendHeaders": true,
              "headerParameters": {
                "parameters": [
                  {
                    "name": "Authorization",
                    "value": "Bearer {{ $credentials.genericCredentialType.password }}"
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ]
              },
              "sendBody": true,
              "bodyParameters": {
                "parameters": [
                  {
                    "name": "model",
                    "value": "anthropic/claude-3-haiku"
                  },
                  {
                    "name": "messages",
                    "value": "=[{\"role\": \"system\", \"content\": \"You are Quark preparing a brief summary for the Observation Lounge. Create a concise, business-focused summary that highlights the key business insights and profit opportunities from your analysis. Keep it under 100 words and maintain your entrepreneurial perspective.\"}, {\"role\": \"user\", \"content\": \"Summarize this business analysis for the Observation Lounge: {{ $json.choices[0].message.content }}\"}]"
                  },
                  {
                    "name": "temperature",
                    "value": "0.6"
                  },
                  {
                    "name": "max_tokens",
                    "value": "200"
                  }
                ]
              },
              "options": {}
            },
            "id": "observation-lounge-quark",
            "name": "Observation Lounge - Quark Summary",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              1136,
              304
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ { \"crew_member\": \"Quark\", \"response\": $json.choices[0].message.content, \"llm_used\": $json.optimalLLM, \"confidence\": $json.confidence, \"business_context\": $json.businessContext, \"reasoning\": $json.reasoning, \"timestamp\": new Date().toISOString(), \"observation_lounge_summary\": $input.last().json.choices[0].message.content } }}",
              "options": {}
            },
            "id": "quark-response-optimized",
            "name": "Quark Response (Optimized)",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1360,
              304
            ]
          }
        ],
        "connections": {
          "quark-directive-webhook": {
            "main": [
              [
                {
                  "node": "business-context-analysis",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "quark-memory-retrieval",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "business-context-analysis": {
            "main": [
              [
                {
                  "node": "llm-optimization-quark",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "llm-optimization-quark": {
            "main": [
              [
                {
                  "node": "quark-ai-agent-optimized",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "quark-ai-agent-optimized": {
            "main": [
              [
                {
                  "node": "quark-memory-storage-optimized",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "observation-lounge-quark",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "quark-memory-storage-optimized": {
            "main": [
              [
                {
                  "node": "quark-response-optimized",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "quark-memory-retrieval": {
            "main": [
              [
                {
                  "node": "quark-ai-agent-optimized",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "observation-lounge-quark": {
            "main": [
              [
                {
                  "node": "quark-response-optimized",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": {},
        "versionId": "1e150006-06ce-459d-9d81-0625acd2418f",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-27T04:28:32.258Z",
            "updatedAt": "2025-08-27T04:28:32.258Z",
            "role": "workflow:owner",
            "workflowId": "L6K4bzSKlGC36ABL",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "QJnN7ks2KsQTENDc",
      "workflow": {
        "createdAt": "2025-08-27T02:25:47.178Z",
        "updatedAt": "2025-09-21T21:31:48.244Z",
        "id": "QJnN7ks2KsQTENDc",
        "name": "CREW - Counselor Deanna Troi - User Experience - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "crew-counselor-deanna-troi",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "crew_directive",
            "name": "Counselor Deanna Troi Directive",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ],
            "webhookId": "7bd01b46-f012-43dd-8de7-82e561b7172d"
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_retrieval",
            "name": "Counselor Deanna Troi Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "llm_selector",
            "name": "LLM Selection Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              320
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "crew_ai",
            "name": "Counselor Deanna Troi AI Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              688,
              304
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_storage",
            "name": "Counselor Deanna Troi Memory Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "observation_communication",
            "name": "Observation Lounge Communication",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              304
            ]
          },
          {
            "parameters": {
              "options": {}
            },
            "id": "crew_response",
            "name": "Counselor Deanna Troi Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1120,
              304
            ]
          }
        ],
        "connections": {
          "Counselor Deanna Troi Directive": {
            "main": [
              [
                {
                  "node": "LLM Selection Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "LLM Selection Agent": {
            "main": [
              [
                {
                  "node": "Counselor Deanna Troi AI Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Counselor Deanna Troi AI Agent": {
            "main": [
              [
                {
                  "node": "Observation Lounge Communication",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Observation Lounge Communication": {
            "main": [
              [
                {
                  "node": "Counselor Deanna Troi Memory Storage",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Counselor Deanna Troi Memory Retrieval": {
            "main": [
              [
                {
                  "node": "LLM Selection Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Counselor Deanna Troi Memory Storage": {
            "main": [
              [
                {
                  "node": "Counselor Deanna Troi Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {},
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "827b40d6-3081-4174-8109-bd4fd2e855d1",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-27T02:25:47.180Z",
            "updatedAt": "2025-08-27T02:25:47.180Z",
            "role": "workflow:owner",
            "workflowId": "QJnN7ks2KsQTENDc",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "RY8pm6gUFtkTKcpg",
      "workflow": {
        "createdAt": "2025-09-05T09:49:27.391Z",
        "updatedAt": "2025-09-21T21:31:49.809Z",
        "id": "RY8pm6gUFtkTKcpg",
        "name": "PROJECT - Alex AI - Resume Analysis - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "alex-ai-resume-analysis",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "webhook-trigger",
            "name": "Webhook Trigger",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              300
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ { \"data\": [], \"total\": 0, \"message\": \"Alex AI Resume Analysis - Production endpoint working\", \"timestamp\": new Date().toISOString() } }}"
            },
            "id": "respond-success",
            "name": "Respond Success",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              460,
              300
            ]
          }
        ],
        "connections": {
          "Webhook Trigger": {
            "main": [
              [
                {
                  "node": "Respond Success",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "472dba4b-f118-4141-939d-1792e8545caf",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-09-05T09:49:27.393Z",
            "updatedAt": "2025-09-05T09:49:27.393Z",
            "role": "workflow:owner",
            "workflowId": "RY8pm6gUFtkTKcpg",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "SXAMupVWdOxZybF6",
      "workflow": {
        "createdAt": "2025-08-27T04:24:00.120Z",
        "updatedAt": "2025-09-21T21:31:48.328Z",
        "id": "SXAMupVWdOxZybF6",
        "name": "CREW - Dr. Beverly Crusher - Health & Diagnostics - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "crew-dr-beverly-crusher",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "316ec69e-0a14-44fa-9bf9-c980054fede0",
            "name": "Dr. Beverly Crusher Directive",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ],
            "webhookId": "7bf9fcf9-f932-4bf7-b92f-3b7eb7e13a01"
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories?crew_member=eq.Dr. Beverly Crusher",
              "options": {}
            },
            "id": "b377b87e-ccf9-473e-a2c4-dfc6e4c6182e",
            "name": "Dr. Beverly Crusher Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "53a8a638-9953-499c-8c46-1b6a17b24be2",
            "name": "LLM Selection Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              352
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "da0f4ff1-5366-4b8d-9357-c426f8a8412d",
            "name": "Dr. Beverly Crusher AI Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              688,
              304
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "1175a043-190f-4d06-88b3-7d7557084458",
            "name": "Dr. Beverly Crusher Memory Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "36cfd0db-07f1-4984-a07e-8ec4ca31244f",
            "name": "Observation Lounge Communication",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              304
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ { \"crew_member\": \"Dr. Beverly Crusher\", \"response\": $json.choices[0].message.content, \"timestamp\": new Date().toISOString() } }}",
              "options": {}
            },
            "id": "9c11db66-6680-49cc-b9b5-611f828c44fa",
            "name": "Dr. Beverly Crusher Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1136,
              304
            ]
          }
        ],
        "connections": {
          "316ec69e-0a14-44fa-9bf9-c980054fede0": {
            "main": [
              [
                {
                  "node": "b377b87e-ccf9-473e-a2c4-dfc6e4c6182e",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "53a8a638-9953-499c-8c46-1b6a17b24be2",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "b377b87e-ccf9-473e-a2c4-dfc6e4c6182e": {
            "main": [
              [
                {
                  "node": "da0f4ff1-5366-4b8d-9357-c426f8a8412d",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "53a8a638-9953-499c-8c46-1b6a17b24be2": {
            "main": [
              [
                {
                  "node": "da0f4ff1-5366-4b8d-9357-c426f8a8412d",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "da0f4ff1-5366-4b8d-9357-c426f8a8412d": {
            "main": [
              [
                {
                  "node": "1175a043-190f-4d06-88b3-7d7557084458",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "36cfd0db-07f1-4984-a07e-8ec4ca31244f",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "1175a043-190f-4d06-88b3-7d7557084458": {
            "main": [
              [
                {
                  "node": "9c11db66-6680-49cc-b9b5-611f828c44fa",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "36cfd0db-07f1-4984-a07e-8ec4ca31244f": {
            "main": [
              [
                {
                  "node": "9c11db66-6680-49cc-b9b5-611f828c44fa",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Dr. Beverly Crusher Directive": {
            "main": [
              [
                {
                  "node": "Dr. Beverly Crusher Memory Retrieval",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Dr. Beverly Crusher Memory Retrieval": {
            "main": [
              [
                {
                  "node": "LLM Selection Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "LLM Selection Agent": {
            "main": [
              [
                {
                  "node": "Dr. Beverly Crusher AI Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Dr. Beverly Crusher AI Agent": {
            "main": [
              [
                {
                  "node": "Observation Lounge Communication",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Observation Lounge Communication": {
            "main": [
              [
                {
                  "node": "Dr. Beverly Crusher Memory Storage",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Dr. Beverly Crusher Memory Storage": {
            "main": [
              [
                {
                  "node": "Dr. Beverly Crusher Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {},
        "staticData": null,
        "meta": null,
        "pinData": {},
        "versionId": "7d82f948-db04-4812-9908-aefafa2f903a",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-27T04:24:00.128Z",
            "updatedAt": "2025-08-27T04:24:00.128Z",
            "role": "workflow:owner",
            "workflowId": "SXAMupVWdOxZybF6",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "VQDH8tqWvVmigWd1",
      "workflow": {
        "createdAt": "2025-08-27T02:25:46.380Z",
        "updatedAt": "2025-09-21T23:52:43.930Z",
        "id": "VQDH8tqWvVmigWd1",
        "name": "SYSTEM - OpenRouter Agent Coordination - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "path": "082503f8-8939-40c4-9620-81e3eff05d82",
              "options": {}
            },
            "id": "federation_directive",
            "name": "Federation Directive Receiver",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ],
            "webhookId": "082503f8-8939-40c4-9620-81e3eff05d82"
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_storage",
            "name": "Federation Concise Agency Memory Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_retrieval",
            "name": "Federation Concise Agency Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "parameters": {
              "options": {}
            },
            "id": "response_handler",
            "name": "Response Handler",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              464,
              304
            ]
          }
        ],
        "connections": {
          "Federation Directive Receiver": {
            "main": [
              [
                {
                  "node": "Response Handler",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Federation Concise Agency Memory Storage": {
            "main": [
              [
                {
                  "node": "Federation Concise Agency Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {},
        "staticData": null,
        "meta": null,
        "pinData": {},
        "versionId": "126cfb45-2fb1-41b2-8c6f-a39831d65916",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-27T02:25:46.381Z",
            "updatedAt": "2025-08-27T02:25:46.381Z",
            "role": "workflow:owner",
            "workflowId": "VQDH8tqWvVmigWd1",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "XJeicUzVaGNb8gsB",
      "workflow": {
        "createdAt": "2025-08-30T19:57:08.538Z",
        "updatedAt": "2025-09-21T21:31:48.848Z",
        "id": "XJeicUzVaGNb8gsB",
        "name": "COORDINATION - Democratic Collaboration - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "path": "llm-collaboration",
              "options": {}
            },
            "id": "webhook-trigger",
            "name": "Webhook Trigger",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              128,
              304
            ],
            "webhookId": "llm-collaboration-webhook"
          },
          {
            "parameters": {
              "functionCode": "// Democratic LLM Selection Algorithm\nconst task = $json.task;\nconst availableModels = $json.collaboration_context.available_models;\nconst budgetConstraints = $json.collaboration_context.budget_constraints;\n\n// Model configurations with OpenRouter IDs\nconst models = {\n  'claude-sonnet': {\n    platform: 'anthropic',\n    openrouter_id: 'anthropic/claude-3.5-sonnet',\n    cost_per_token: 0.000003,\n    specialization: 'strategic_analysis',\n    strengths: ['reasoning', 'analysis', 'coding', 'writing']\n  },\n  'gpt-4o': {\n    platform: 'openai', \n    openrouter_id: 'openai/gpt-4o',\n    cost_per_token: 0.000005,\n    specialization: 'research',\n    strengths: ['multimodal', 'creativity', 'general_purpose']\n  },\n  'gemini-pro': {\n    platform: 'google',\n    openrouter_id: 'google/gemini-pro-1.5',\n    cost_per_token: 0.000002,\n    specialization: 'optimization', \n    strengths: ['code_analysis', 'performance', 'efficiency']\n  },\n  'llama-3': {\n    platform: 'meta',\n    openrouter_id: 'meta-llama/llama-3-70b-instruct',\n    cost_per_token: 0.000001,\n    specialization: 'code_implementation',\n    strengths: ['open_source', 'cost_effective', 'coding']\n  }\n};\n\n// Task-model affinity scoring\nconst taskAffinities = {\n  'code_implementation': {\n    'llama-3': 0.95,\n    'claude-sonnet': 0.85,\n    'gemini-pro': 0.80,\n    'gpt-4o': 0.70\n  },\n  'strategic_analysis': {\n    'claude-sonnet': 0.98,\n    'gpt-4o': 0.90,\n    'gemini-pro': 0.75,\n    'llama-3': 0.65\n  },\n  'research': {\n    'gpt-4o': 0.95,\n    'claude-sonnet': 0.85,\n    'gemini-pro': 0.75,\n    'llama-3': 0.60\n  },\n  'optimization': {\n    'gemini-pro': 0.95,\n    'llama-3': 0.85,\n    'claude-sonnet': 0.80,\n    'gpt-4o': 0.75\n  }\n};\n\n// Democratic selection algorithm\nfunction selectBestModel(task, availableModels) {\n  const taskType = task.type;\n  const complexity = task.complexity;\n  \n  let scores = {};\n  \n  // Calculate base scores from task affinity\n  if (taskAffinities[taskType]) {\n    scores = { ...taskAffinities[taskType] };\n  } else {\n    // Default scoring for unknown task types\n    availableModels.forEach(model => {\n      scores[model] = 0.7; // neutral score\n    });\n  }\n  \n  // Adjust for complexity\n  const complexityMultiplier = {\n    'low': 0.9,\n    'medium': 1.0,\n    'high': 1.1\n  }[complexity] || 1.0;\n  \n  // Apply complexity adjustment and cost considerations\n  Object.keys(scores).forEach(modelName => {\n    if (models[modelName]) {\n      scores[modelName] *= complexityMultiplier;\n      \n      // Cost efficiency bonus for budget-conscious selections\n      const costEfficiency = 1 / (models[modelName].cost_per_token * 1000000); // normalize\n      scores[modelName] += costEfficiency * 0.1; // small cost bonus\n    }\n  });\n  \n  // Find the best model\n  const bestModel = Object.entries(scores)\n    .filter(([model]) => availableModels.includes(model))\n    .sort(([,a], [,b]) => b - a)[0];\n  \n  return {\n    selected_model: bestModel[0],\n    confidence: bestModel[1],\n    all_scores: scores,\n    model_config: models[bestModel[0]]\n  };\n}\n\n// Perform selection\nconst selection = selectBestModel(task, availableModels);\n\n// Estimate cost\nconst estimatedTokens = {\n  'low': 500,\n  'medium': 1500,\n  'high': 3000\n}[task.complexity] || 1500;\n\nconst estimatedCost = estimatedTokens * selection.model_config.cost_per_token;\n\nreturn [{\n  collaboration_id: $json.collaboration_id,\n  session_id: $json.session_id,\n  selected_model: selection.selected_model,\n  confidence_score: selection.confidence,\n  model_config: selection.model_config,\n  estimated_cost: estimatedCost,\n  estimated_tokens: estimatedTokens,\n  routing_decision: {\n    primary_model: selection.selected_model,\n    fallback_models: Object.entries(selection.all_scores)\n      .filter(([model]) => model !== selection.selected_model && availableModels.includes(model))\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 2)\n      .map(([model]) => model),\n    democratic_scores: selection.all_scores\n  },\n  task: task\n}];"
            },
            "id": "democratic-router",
            "name": "Democratic LLM Router",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              352,
              304
            ]
          },
          {
            "parameters": {},
            "id": "model-router",
            "name": "Model Router",
            "type": "n8n-nodes-base.switch",
            "typeVersion": 2,
            "position": [
              560,
              304
            ]
          },
          {
            "parameters": {
              "url": "https://api.anthropic.com/v1/messages",
              "authentication": "genericCredentialType",
              "genericAuthType": "httpHeaderAuth",
              "sendHeaders": true,
              "headerParameters": {
                "parameters": [
                  {
                    "name": "x-api-key",
                    "value": "={{$env.CLAUDE_API_KEY}}"
                  },
                  {
                    "name": "anthropic-version",
                    "value": "2023-06-01"
                  },
                  {
                    "name": "content-type",
                    "value": "application/json"
                  }
                ]
              },
              "sendBody": true,
              "bodyParameters": {
                "parameters": [
                  {
                    "name": "model",
                    "value": "claude-3-5-sonnet-20241022"
                  },
                  {
                    "name": "max_tokens",
                    "value": "={{$json.estimated_tokens}}"
                  },
                  {
                    "name": "messages",
                    "value": "=[{\"role\": \"user\", \"content\": $json.task.description}]"
                  }
                ]
              },
              "options": {}
            },
            "id": "claude-endpoint",
            "name": "Claude API",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.2,
            "position": [
              784,
              208
            ]
          },
          {
            "parameters": {
              "url": "https://openrouter.ai/api/v1/chat/completions",
              "authentication": "genericCredentialType",
              "genericAuthType": "httpHeaderAuth",
              "sendHeaders": true,
              "headerParameters": {
                "parameters": [
                  {
                    "name": "Authorization",
                    "value": "Bearer {{$env.OPENROUTER_API_KEY}}"
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "name": "HTTP-Referer",
                    "value": "https://n8n.pbradygeorgen.com"
                  },
                  {
                    "name": "X-Title",
                    "value": "LLM Democratic Collaboration"
                  }
                ]
              },
              "sendBody": true,
              "bodyParameters": {
                "parameters": [
                  {
                    "name": "model",
                    "value": "={{$json.model_config.openrouter_id}}"
                  },
                  {
                    "name": "max_tokens",
                    "value": "={{$json.estimated_tokens}}"
                  },
                  {
                    "name": "messages",
                    "value": "=[{\"role\": \"user\", \"content\": $json.task.description}]"
                  },
                  {
                    "name": "temperature",
                    "value": 0.7
                  }
                ]
              },
              "options": {}
            },
            "id": "openrouter-endpoint",
            "name": "OpenRouter API",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.2,
            "position": [
              784,
              400
            ]
          },
          {
            "parameters": {
              "functionCode": "// Response Aggregation and Quality Assessment\nconst input = $input.all();\nconst originalData = input[0]; // Contains our routing decision\nconst llmResponse = input[0]; // Contains the LLM response\n\n// Parse the LLM response based on the platform\nlet parsedResponse;\nlet usage = {};\n\nif (originalData.selected_model === 'claude-sonnet') {\n  // Claude API response format\n  parsedResponse = {\n    content: llmResponse.content?.[0]?.text || llmResponse.text || 'No response',\n    model: llmResponse.model || 'claude-3-5-sonnet-20241022',\n    usage: llmResponse.usage || {}\n  };\n} else {\n  // OpenRouter API response format (OpenAI compatible)\n  parsedResponse = {\n    content: llmResponse.choices?.[0]?.message?.content || 'No response',\n    model: llmResponse.model || originalData.model_config.openrouter_id,\n    usage: llmResponse.usage || {}\n  };\n}\n\n// Calculate actual cost based on usage\nconst actualTokens = parsedResponse.usage.total_tokens || originalData.estimated_tokens;\nconst actualCost = actualTokens * originalData.model_config.cost_per_token;\n\n// Quality assessment\nconst qualityMetrics = {\n  response_length: parsedResponse.content.length,\n  estimated_vs_actual_tokens: {\n    estimated: originalData.estimated_tokens,\n    actual: actualTokens,\n    accuracy: Math.abs(1 - (actualTokens / originalData.estimated_tokens))\n  },\n  cost_efficiency: {\n    estimated: originalData.estimated_cost,\n    actual: actualCost,\n    savings: originalData.estimated_cost - actualCost\n  },\n  model_confidence: originalData.confidence_score\n};\n\n// Final collaboration result\nconst collaborationResult = {\n  collaboration_id: originalData.collaboration_id,\n  session_id: originalData.session_id,\n  timestamp: new Date().toISOString(),\n  \n  // Democratic selection results\n  democratic_selection: {\n    selected_model: originalData.selected_model,\n    confidence_score: originalData.confidence_score,\n    routing_decision: originalData.routing_decision,\n    selection_rationale: `Selected ${originalData.selected_model} with ${(originalData.confidence_score * 100).toFixed(1)}% confidence for ${originalData.task.type} task`\n  },\n  \n  // LLM Response\n  llm_response: {\n    content: parsedResponse.content,\n    model: parsedResponse.model,\n    platform: originalData.model_config.platform\n  },\n  \n  // Cost and usage analytics\n  analytics: {\n    usage: parsedResponse.usage,\n    cost_analysis: qualityMetrics.cost_efficiency,\n    token_prediction_accuracy: qualityMetrics.estimated_vs_actual_tokens.accuracy,\n    quality_score: Math.min(1.0, originalData.confidence_score * (1 - qualityMetrics.estimated_vs_actual_tokens.accuracy * 0.1))\n  },\n  \n  // Task metadata\n  task_metadata: {\n    task_id: originalData.task.task_id,\n    task_type: originalData.task.type,\n    complexity: originalData.task.complexity,\n    completion_time: new Date().toISOString()\n  },\n  \n  // System metadata for learning\n  system_metadata: {\n    n8n_workflow: 'LLM_Democratic_Collaboration',\n    integration_version: '1.0.0',\n    collaboration_mode: 'democratic_selection',\n    success: true\n  }\n};\n\nreturn [collaborationResult];"
            },
            "id": "response-aggregator",
            "name": "Response Aggregator",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              1008,
              304
            ]
          },
          {
            "parameters": {
              "url": "={{ $env.N8N_BASE_URL }}/webhook/collaboration-complete",
              "sendHeaders": true,
              "headerParameters": {
                "parameters": [
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ]
              },
              "sendBody": true,
              "bodyParameters": {
                "parameters": [
                  {
                    "name": "collaboration_result",
                    "value": "={{$json}}"
                  }
                ]
              },
              "options": {}
            },
            "id": "result-webhook",
            "name": "Result Webhook",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.2,
            "position": [
              1232,
              304
            ]
          }
        ],
        "connections": {
          "Webhook Trigger": {
            "main": [
              [
                {
                  "node": "Democratic LLM Router",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Democratic LLM Router": {
            "main": [
              [
                {
                  "node": "Model Router",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Model Router": {
            "main": [
              [
                {
                  "node": "Claude API",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "OpenRouter API",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "OpenRouter API",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "OpenRouter API",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Claude API": {
            "main": [
              [
                {
                  "node": "Response Aggregator",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "OpenRouter API": {
            "main": [
              [
                {
                  "node": "Response Aggregator",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Response Aggregator": {
            "main": [
              [
                {
                  "node": "Result Webhook",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": {},
        "versionId": "fde34caa-5ff0-4a9d-8485-8153a6de393a",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-30T19:57:08.542Z",
            "updatedAt": "2025-08-30T19:57:08.542Z",
            "role": "workflow:owner",
            "workflowId": "XJeicUzVaGNb8gsB",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "Xbdaf4VdEA4mEuL2",
      "workflow": {
        "createdAt": "2025-09-07T08:43:29.096Z",
        "updatedAt": "2025-09-21T21:31:49.639Z",
        "id": "Xbdaf4VdEA4mEuL2",
        "name": "PROJECT - Alex AI - MCP Enhancement - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "alex-ai-mcp-enhanced",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "mcp_webhook_trigger",
            "name": "Enhanced MCP Webhook Trigger",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              300
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.github.com/repos/modelcontextprotocol/servers",
              "options": {}
            },
            "id": "github_mcp_scraper",
            "name": "GitHub MCP Repository Scraper",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              200
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://modelcontextprotocol.io/docs",
              "options": {}
            },
            "id": "mcp_docs_scraper",
            "name": "MCP Documentation Scraper",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              400
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "alex_ai_mcp_analyzer",
            "name": "Alex AI MCP Knowledge Analyzer",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              688,
              300
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/mcp_knowledge_base",
              "options": {}
            },
            "id": "mcp_knowledge_storage",
            "name": "MCP Knowledge Base Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              300
            ]
          },
          {
            "parameters": {
              "options": {}
            },
            "id": "mcp_response",
            "name": "Enhanced MCP Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1120,
              300
            ]
          }
        ],
        "connections": {
          "Enhanced MCP Webhook Trigger": {
            "main": [
              [
                {
                  "node": "GitHub MCP Repository Scraper",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "MCP Documentation Scraper",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "GitHub MCP Repository Scraper": {
            "main": [
              [
                {
                  "node": "Alex AI MCP Knowledge Analyzer",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "MCP Documentation Scraper": {
            "main": [
              [
                {
                  "node": "Alex AI MCP Knowledge Analyzer",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Alex AI MCP Knowledge Analyzer": {
            "main": [
              [
                {
                  "node": "MCP Knowledge Base Storage",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "MCP Knowledge Base Storage": {
            "main": [
              [
                {
                  "node": "Enhanced MCP Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "468e24c2-d4a4-4322-ab95-78f88a4d3d9c",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-09-07T08:43:29.098Z",
            "updatedAt": "2025-09-07T08:43:29.098Z",
            "role": "workflow:owner",
            "workflowId": "Xbdaf4VdEA4mEuL2",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "YIm1VzYzVdphsjb9",
      "workflow": {
        "createdAt": "2025-09-03T00:18:30.378Z",
        "updatedAt": "2025-09-21T21:31:48.976Z",
        "id": "YIm1VzYzVdphsjb9",
        "name": "COORDINATION - Observation Lounge - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "observation-lounge",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "observation-lounge-trigger",
            "name": "Observation Lounge Trigger",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ],
            "webhookId": "observation-lounge-webhook"
          },
          {
            "parameters": {
              "jsCode": "// Validate and prepare Observation Lounge session\nconst inputData = $input.all()[0].json;\n\n// Validate required fields\nif (!inputData.topic) {\n  throw new Error('topic is required for Observation Lounge session');\n}\n\n// Extract session parameters\nconst topic = inputData.topic;\nconst context = inputData.context || {};\nconst crew_members = inputData.crew_members || 'all';\nconst discussion_type = inputData.discussion_type || 'collaborative';\nconst priority = inputData.priority || 'medium';\n\n// Prepare enhanced session data\nreturn {\n  session_id: `ol_${Date.now()}`,\n  topic: topic,\n  context: context,\n  crew_members: crew_members,\n  discussion_type: discussion_type,\n  priority: priority,\n  timestamp: new Date().toISOString(),\n  session_status: 'initialized',\n  \n  // Discussion framework\n  framework: {\n    objective: 'Collaborative crew decision-making',\n    format: 'Structured department perspectives',\n    output: 'Synthesized recommendations and action plan'\n  },\n  \n  // Crew coordination parameters\n  coordination: {\n    max_response_time: 30000, // 30 seconds\n    require_all_departments: true,\n    enable_synthesis: true,\n    enable_recommendations: true\n  }\n};"
            },
            "id": "session-validator",
            "name": "Session Validator & Coordinator",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
              464,
              304
            ]
          },
          {
            "parameters": {
              "jsCode": "// Route to appropriate crew coordination method\nconst sessionData = $input.all()[0].json;\nconst { discussion_type, crew_members, priority } = sessionData;\n\n// Determine routing strategy\nlet routing_strategy = 'full_crew';\nlet crew_selection = 'all';\nlet coordination_method = 'observation_lounge';\n\nif (discussion_type === 'department_specific') {\n  routing_strategy = 'department_focused';\n  crew_selection = crew_members;\n  coordination_method = 'department_meeting';\n} else if (discussion_type === 'executive') {\n  routing_strategy = 'command_focused';\n  crew_selection = ['captain_picard', 'commander_riker', 'commander_data'];\n  coordination_method = 'command_briefing';\n} else if (discussion_type === 'technical') {\n  routing_strategy = 'technical_focused';\n  crew_selection = ['geordi_la_forge', 'commander_data', 'lieutenant_worf'];\n  coordination_method = 'technical_review';\n} else if (discussion_type === 'strategic') {\n  routing_strategy = 'strategic_focused';\n  crew_selection = ['captain_picard', 'commander_data', 'counselor_troi', 'quark'];\n  coordination_method = 'strategic_planning';\n}\n\n// Priority-based adjustments\nif (priority === 'high') {\n  coordination_method += '_urgent';\n} else if (priority === 'low') {\n  coordination_method += '_standard';\n}\n\nreturn {\n  ...sessionData,\n  routing_strategy: routing_strategy,\n  crew_selection: crew_selection,\n  coordination_method: coordination_method,\n  \n  // Enhanced coordination parameters\n  coordination_enhanced: {\n    method: coordination_method,\n    crew_count: Array.isArray(crew_selection) ? crew_selection.length : 'all',\n    expected_duration: priority === 'high' ? 'fast' : 'standard',\n    synthesis_required: true\n  }\n};"
            },
            "id": "crew-routing-engine",
            "name": "Crew Routing & Coordination Engine",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
              688,
              304
            ]
          },
          {
            "parameters": {
              "command": "python3"
            },
            "id": "observation-lounge-coordinator",
            "name": "Observation Lounge Coordinator (Python)",
            "type": "n8n-nodes-base.executeCommand",
            "typeVersion": 1,
            "position": [
              912,
              304
            ]
          },
          {
            "parameters": {
              "jsCode": "// Process Observation Lounge results and format for Cursor UI\nconst coordinatorOutput = $input.all()[0].json;\nconst sessionData = $input.all()[1].json;\n\n// Check if coordination was successful\nif (coordinatorOutput.error) {\n  return {\n    success: false,\n    error: coordinatorOutput.error,\n    session_id: sessionData.session_id,\n    timestamp: new Date().toISOString(),\n    ui_feedback: {\n      message: 'Observation Lounge session failed - please try again',\n      type: 'error',\n      show_retry: true\n    }\n  };\n}\n\n// Parse the coordinator output\nconst result = JSON.parse(coordinatorOutput.stdout || '{}');\n\nif (result.observation_lounge_session) {\n  // Enhanced Observation Lounge response\n  return {\n    success: true,\n    \n    // Session information\n    session: {\n      id: sessionData.session_id,\n      topic: sessionData.topic,\n      status: result.observation_lounge_session.session_status,\n      participants: result.observation_lounge_session.participants,\n      total_crew: result.observation_lounge_session.total_crew,\n      timestamp: result.observation_lounge_session.timestamp\n    },\n    \n    // Crew insights by department\n    crew_insights: result.crew_insights,\n    \n    // Synthesized discussion results\n    synthesis: result.synthesis,\n    \n    // Actionable outcomes\n    recommendations: result.recommendations || [],\n    next_actions: result.next_actions || [],\n    \n    // UI enhancement data for Cursor\n    ui_enhancements: {\n      // Visual representation of crew participation\n      crew_participation: {\n        total_crew: result.observation_lounge_session.total_crew,\n        active_participants: result.observation_lounge_session.participants,\n        participation_rate: (result.observation_lounge_session.participants / result.observation_lounge_session.total_crew * 100).toFixed(1) + '%',\n        status_icon: '🚀'\n      },\n      \n      // Department insights summary\n      department_summary: Object.values(result.crew_insights || {})\n        .filter(insight => insight.status === 'success')\n        .map(insight => ({\n          department: insight.department,\n          crew_member: insight.crew_member,\n          confidence: insight.confidence,\n          status: 'active'\n        })),\n      \n      // Discussion quality metrics\n      discussion_quality: {\n        synthesis_available: !!result.synthesis,\n        recommendations_count: result.recommendations?.length || 0,\n        actions_count: result.next_actions?.length || 0,\n        quality_score: 'high'\n      }\n    },\n    \n    // Metadata\n    metadata: {\n      coordination_method: sessionData.coordination_method,\n      routing_strategy: sessionData.routing_strategy,\n      priority: sessionData.priority,\n      discussion_type: sessionData.discussion_type\n    }\n  };\n} else {\n  return {\n    success: false,\n    error: 'Invalid Observation Lounge response format',\n    session_id: sessionData.session_id,\n    timestamp: new Date().toISOString(),\n    ui_feedback: {\n      message: 'Observation Lounge response format error',\n      type: 'error',\n      show_retry: true\n    }\n  };\n}"
            },
            "id": "observation-lounge-processor",
            "name": "Observation Lounge Response Processor",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
              1120,
              304
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ $json }}",
              "options": {}
            },
            "id": "observation-lounge-response",
            "name": "Observation Lounge Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1344,
              304
            ]
          },
          {
            "parameters": {
              "jsCode": "// Enhanced logging and monitoring for Observation Lounge sessions\nconst responseData = $input.all()[0].json;\nconst sessionData = $input.all()[1].json;\n\nif (responseData.success) {\n  const { session, crew_insights, synthesis } = responseData;\n  \n  console.log(`🚀 Observation Lounge Session Success:`);\n  console.log(`   Session ID: ${session.id}`);\n  console.log(`   Topic: ${session.topic}`);\n  console.log(`   Participants: ${session.participants}/${session.total_crew}`);\n  console.log(`   Status: ${session.status}`);\n  console.log(`   Timestamp: ${session.timestamp}`);\n  \n  // Log crew participation by department\n  const departmentStats = {};\n  Object.values(crew_insights).forEach(insight => {\n    if (insight.status === 'success') {\n      const dept = insight.department;\n      if (!departmentStats[dept]) departmentStats[dept] = 0;\n      departmentStats[dept]++;\n    }\n  });\n  \n  console.log(`   Department Participation:`);\n  Object.entries(departmentStats).forEach(([dept, count]) => {\n    console.log(`     ${dept}: ${count} crew members`);\n  });\n  \n  // Log synthesis availability\n  if (synthesis) {\n    console.log(`   Synthesis: Available`);\n  } else {\n    console.log(`   Synthesis: Not available`);\n  }\n  \n} else {\n  console.error(`❌ Observation Lounge Session Failed: ${responseData.error}`);\n  console.error(`   Session ID: ${responseData.session_id}`);\n  console.error(`   Timestamp: ${responseData.timestamp}`);\n}\n\n// Pass through the data for potential further processing\nreturn responseData;"
            },
            "id": "observation-lounge-logging",
            "name": "Observation Lounge Logging & Monitoring",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
              1120,
              512
            ]
          },
          {
            "parameters": {},
            "id": "observation-lounge-status-updater",
            "name": "Observation Lounge Status Updater",
            "type": "n8n-nodes-base.code",
            "position": [
              1344,
              512
            ]
          }
        ],
        "connections": {
          "observation-lounge-trigger": {
            "main": [
              [
                {
                  "node": "session-validator",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "session-validator": {
            "main": [
              [
                {
                  "node": "crew-routing-engine",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "crew-routing-engine": {
            "main": [
              [
                {
                  "node": "observation-lounge-coordinator",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "observation-lounge-coordinator": {
            "main": [
              [
                {
                  "node": "observation-lounge-processor",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "observation-lounge-processor": {
            "main": [
              [
                {
                  "node": "observation-lounge-response",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "observation-lounge-logging",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "observation-lounge-logging": {
            "main": [
              [
                {
                  "node": "observation-lounge-status-updater",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Observation Lounge Trigger": {
            "main": [
              [
                {
                  "node": "Session Validator & Coordinator",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Session Validator & Coordinator": {
            "main": [
              [
                {
                  "node": "Crew Routing & Coordination Engine",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Crew Routing & Coordination Engine": {
            "main": [
              [
                {
                  "node": "Observation Lounge Coordinator (Python)",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Observation Lounge Coordinator (Python)": {
            "main": [
              [
                {
                  "node": "Observation Lounge Response Processor",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Observation Lounge Response Processor": {
            "main": [
              [
                {
                  "node": "Observation Lounge Logging & Monitoring",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Observation Lounge Logging & Monitoring": {
            "main": [
              [
                {
                  "node": "Observation Lounge Status Updater",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Observation Lounge Status Updater": {
            "main": [
              [
                {
                  "node": "Observation Lounge Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": {},
        "versionId": "ae784fba-c2fb-4512-bd01-1a569a09733c",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-09-03T00:18:30.384Z",
            "updatedAt": "2025-09-03T00:18:30.384Z",
            "role": "workflow:owner",
            "workflowId": "YIm1VzYzVdphsjb9",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "aNfs26Wlau80ufmh",
      "workflow": {
        "createdAt": "2025-08-27T02:25:47.006Z",
        "updatedAt": "2025-09-21T21:31:49.971Z",
        "id": "aNfs26Wlau80ufmh",
        "name": "SYSTEM - Mission Control - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "path": "0283b7ab-c44c-47c2-925a-513054e1105f",
              "options": {}
            },
            "id": "mission_directive",
            "name": "Mission Directive",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ],
            "webhookId": "0283b7ab-c44c-47c2-925a-513054e1105f"
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_storage",
            "name": "AlexAI Optimized Crew Memory Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_retrieval",
            "name": "AlexAI Optimized Crew Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "parameters": {
              "options": {}
            },
            "id": "mission_response",
            "name": "Mission Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              464,
              304
            ]
          }
        ],
        "connections": {
          "Mission Directive": {
            "main": [
              [
                {
                  "node": "Mission Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "AlexAI Optimized Crew Memory Storage": {
            "main": [
              [
                {
                  "node": "AlexAI Optimized Crew Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {},
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "f295ba47-b485-407e-8de9-422752672748",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-27T02:25:47.008Z",
            "updatedAt": "2025-08-27T02:25:47.008Z",
            "role": "workflow:owner",
            "workflowId": "aNfs26Wlau80ufmh",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "e0UEwyVcXJqeePdj",
      "workflow": {
        "createdAt": "2025-08-27T02:25:46.595Z",
        "updatedAt": "2025-09-21T21:31:48.410Z",
        "id": "e0UEwyVcXJqeePdj",
        "name": "CREW - Lieutenant Commander Geordi La Forge - Infrastructure - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "crew-lieutenant-commander-geordi-la-forge",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "crew_directive",
            "name": "Lieutenant Commander Geordi La Forge Directive",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ],
            "webhookId": "70c17a41-3e31-43ac-851d-3c490da2891b"
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_retrieval",
            "name": "Lieutenant Commander Geordi La Forge Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "llm_selector",
            "name": "LLM Selection Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              368
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "crew_ai",
            "name": "Lieutenant Commander Geordi La Forge AI Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              688,
              304
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_storage",
            "name": "Lieutenant Commander Geordi La Forge Memory Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "observation_communication",
            "name": "Observation Lounge Communication",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              304
            ]
          },
          {
            "parameters": {
              "options": {}
            },
            "id": "crew_response",
            "name": "Lieutenant Commander Geordi La Forge Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1120,
              304
            ]
          }
        ],
        "connections": {
          "Lieutenant Commander Geordi La Forge Directive": {
            "main": [
              [
                {
                  "node": "LLM Selection Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "LLM Selection Agent": {
            "main": [
              [
                {
                  "node": "Lieutenant Commander Geordi La Forge AI Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Lieutenant Commander Geordi La Forge AI Agent": {
            "main": [
              [
                {
                  "node": "Observation Lounge Communication",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Observation Lounge Communication": {
            "main": [
              [
                {
                  "node": "Lieutenant Commander Geordi La Forge Memory Storage",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Lieutenant Commander Geordi La Forge Memory Retrieval": {
            "main": [
              [
                {
                  "node": "LLM Selection Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Lieutenant Commander Geordi La Forge Memory Storage": {
            "main": [
              [
                {
                  "node": "Lieutenant Commander Geordi La Forge Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {},
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "7680ef81-45d5-4d25-b8fc-6ec5e2147079",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-27T02:25:46.596Z",
            "updatedAt": "2025-08-27T02:25:46.596Z",
            "role": "workflow:owner",
            "workflowId": "e0UEwyVcXJqeePdj",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "eudNA8lttXSkXIa0",
      "workflow": {
        "createdAt": "2025-09-21T21:31:47.720Z",
        "updatedAt": "2025-09-21T21:31:47.720Z",
        "id": "eudNA8lttXSkXIa0",
        "name": "Hallucination Monitoring Dashboard",
        "active": false,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "rule": {
                "interval": [
                  {
                    "field": "minutes",
                    "minutesInterval": 5
                  }
                ]
              }
            },
            "id": "schedule-trigger",
            "name": "Schedule Trigger",
            "type": "n8n-nodes-base.scheduleTrigger",
            "typeVersion": 1,
            "position": [
              240,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Collect hallucination monitoring data\nconst timestamp = new Date().toISOString();\n\n// Simulate system metrics collection\nconst systemMetrics = {\n  timestamp,\n  totalPrompts: Math.floor(Math.random() * 100) + 50,\n  hallucinationsDetected: Math.floor(Math.random() * 10) + 1,\n  correctionsApplied: Math.floor(Math.random() * 8) + 1,\n  averageProcessingTime: Math.floor(Math.random() * 5000) + 2000,\n  systemHealth: Math.random() * 0.4 + 0.6 // 60-100%\n};\n\n// Simulate crew member accuracy data\nconst crewMemberAccuracy = {\n  'Captain Picard': Math.random() * 0.2 + 0.8,\n  'Commander Data': Math.random() * 0.15 + 0.85,\n  'Counselor Troi': Math.random() * 0.25 + 0.75,\n  'Lieutenant Worf': Math.random() * 0.2 + 0.8,\n  'Commander Riker': Math.random() * 0.18 + 0.82,\n  'Lieutenant Commander La Forge': Math.random() * 0.15 + 0.85,\n  'Doctor Crusher': Math.random() * 0.22 + 0.78,\n  'Lieutenant Commander Tasha Yar': Math.random() * 0.2 + 0.8,\n  'Lieutenant Commander Spock': Math.random() * 0.12 + 0.88\n};\n\n// Simulate LLM performance data\nconst llmPerformance = {\n  'anthropic/claude-3-opus': Math.random() * 0.15 + 0.85,\n  'anthropic/claude-3-sonnet': Math.random() * 0.18 + 0.82,\n  'openai/gpt-4-turbo': Math.random() * 0.16 + 0.84,\n  'openai/gpt-4': Math.random() * 0.17 + 0.83,\n  'openai/gpt-3.5-turbo': Math.random() * 0.2 + 0.8\n};\n\n// Generate trend analysis\nconst trends = {\n  hallucinationRate: {\n    current: systemMetrics.hallucinationsDetected / systemMetrics.totalPrompts,\n    trend: Math.random() > 0.5 ? 'decreasing' : 'increasing',\n    change: Math.random() * 0.1 - 0.05 // -5% to +5%\n  },\n  systemHealth: {\n    current: systemMetrics.systemHealth,\n    trend: systemMetrics.systemHealth > 0.8 ? 'stable' : 'declining',\n    change: Math.random() * 0.05 - 0.025 // -2.5% to +2.5%\n  },\n  processingTime: {\n    current: systemMetrics.averageProcessingTime,\n    trend: systemMetrics.averageProcessingTime < 3000 ? 'improving' : 'degrading',\n    change: Math.random() * 500 - 250 // -250ms to +250ms\n  }\n};\n\n// Generate alerts\nconst alerts = [];\nif (systemMetrics.systemHealth < 0.7) {\n  alerts.push({\n    type: 'warning',\n    message: 'System health below 70%',\n    severity: 'medium'\n  });\n}\nif (systemMetrics.hallucinationsDetected / systemMetrics.totalPrompts > 0.15) {\n  alerts.push({\n    type: 'error',\n    message: 'Hallucination rate above 15%',\n    severity: 'high'\n  });\n}\nif (systemMetrics.averageProcessingTime > 10000) {\n  alerts.push({\n    type: 'warning',\n    message: 'Processing time above 10 seconds',\n    severity: 'medium'\n  });\n}\n\nreturn {\n  systemMetrics,\n  crewMemberAccuracy,\n  llmPerformance,\n  trends,\n  alerts,\n  timestamp,\n  monitoringPeriod: '5 minutes'\n};"
            },
            "id": "metrics-collection",
            "name": "Metrics Collection",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              460,
              300
            ]
          },
          {
            "parameters": {
              "conditions": {
                "string": [
                  {
                    "value1": "={{ $json.alerts.length }}",
                    "operation": "larger",
                    "value2": "0"
                  }
                ]
              }
            },
            "id": "alert-check",
            "name": "Alert Check",
            "type": "n8n-nodes-base.if",
            "typeVersion": 1,
            "position": [
              680,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Process alerts and generate notifications\nconst monitoringData = $input.first().json;\nconst alerts = monitoringData.alerts;\n\n// Generate alert notifications\nconst notifications = alerts.map(alert => ({\n  id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  type: alert.type,\n  severity: alert.severity,\n  message: alert.message,\n  timestamp: monitoringData.timestamp,\n  systemHealth: monitoringData.systemMetrics.systemHealth,\n  recommendedActions: generateRecommendedActions(alert)\n}));\n\nfunction generateRecommendedActions(alert) {\n  switch (alert.type) {\n    case 'warning':\n      return [\n        'Review system configuration',\n        'Check crew member performance',\n        'Monitor for additional issues'\n      ];\n    case 'error':\n      return [\n        'Immediate investigation required',\n        'Review hallucination detection thresholds',\n        'Consider system restart if persistent',\n        'Escalate to system administrator'\n      ];\n    default:\n      return ['Monitor system closely'];\n  }\n}\n\nreturn {\n  ...monitoringData,\n  notifications,\n  alertCount: alerts.length\n};"
            },
            "id": "alert-processing",
            "name": "Alert Processing",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              900,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Generate monitoring dashboard data\nconst monitoringData = $input.first().json;\n\n// Format dashboard data\nconst dashboardData = {\n  timestamp: monitoringData.timestamp,\n  summary: {\n    systemHealth: Math.round(monitoringData.systemMetrics.systemHealth * 100),\n    totalPrompts: monitoringData.systemMetrics.totalPrompts,\n    hallucinationRate: Math.round((monitoringData.systemMetrics.hallucinationsDetected / monitoringData.systemMetrics.totalPrompts) * 100),\n    correctionsApplied: monitoringData.systemMetrics.correctionsApplied,\n    averageProcessingTime: monitoringData.systemMetrics.averageProcessingTime\n  },\n  trends: monitoringData.trends,\n  alerts: monitoringData.alerts || [],\n  notifications: monitoringData.notifications || [],\n  crewPerformance: Object.entries(monitoringData.crewMemberAccuracy).map(([member, accuracy]) => ({\n    crewMember: member,\n    accuracy: Math.round(accuracy * 100),\n    status: accuracy > 0.8 ? 'excellent' : accuracy > 0.7 ? 'good' : 'needs_attention'\n  })),\n  llmPerformance: Object.entries(monitoringData.llmPerformance).map(([llm, performance]) => ({\n    llm,\n    performance: Math.round(performance * 100),\n    status: performance > 0.85 ? 'optimal' : performance > 0.8 ? 'good' : 'needs_optimization'\n  })),\n  recommendations: generateRecommendations(monitoringData)\n};\n\nfunction generateRecommendations(data) {\n  const recommendations = [];\n  \n  if (data.systemMetrics.systemHealth < 0.8) {\n    recommendations.push({\n      type: 'system_health',\n      priority: 'high',\n      message: 'System health is below optimal. Consider reviewing hallucination detection thresholds.'\n    });\n  }\n  \n  if (data.systemMetrics.averageProcessingTime > 5000) {\n    recommendations.push({\n      type: 'performance',\n      priority: 'medium',\n      message: 'Processing time is high. Consider optimizing LLM selection or reducing crew size.'\n    });\n  }\n  \n  const lowAccuracyCrew = Object.entries(data.crewMemberAccuracy)\n    .filter(([_, accuracy]) => accuracy < 0.8)\n    .map(([member, _]) => member);\n  \n  if (lowAccuracyCrew.length > 0) {\n    recommendations.push({\n      type: 'crew_training',\n      priority: 'medium',\n      message: `Crew members with low accuracy: ${lowAccuracyCrew.join(', ')}. Consider additional training.`\n    });\n  }\n  \n  return recommendations;\n}\n\nreturn dashboardData;"
            },
            "id": "dashboard-generation",
            "name": "Dashboard Generation",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              1120,
              300
            ]
          },
          {
            "parameters": {
              "operation": "insert",
              "table": "hallucination_monitoring",
              "columns": "timestamp, system_health, total_prompts, hallucination_rate, corrections_applied, processing_time, alerts_count, recommendations_count",
              "values": "={{ $json.timestamp }}, {{ $json.summary.systemHealth }}, {{ $json.summary.totalPrompts }}, {{ $json.summary.hallucinationRate }}, {{ $json.summary.correctionsApplied }}, {{ $json.summary.averageProcessingTime }}, {{ $json.alerts.length }}, {{ $json.recommendations.length }}"
            },
            "id": "database-storage",
            "name": "Database Storage",
            "type": "n8n-nodes-base.supabase",
            "typeVersion": 1,
            "position": [
              1340,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Log monitoring results\nconst dashboardData = $input.first().json;\n\nconsole.log('🛡️ Anti-Hallucination Monitoring Dashboard');\nconsole.log('==========================================');\nconsole.log(`📊 System Health: ${dashboardData.summary.systemHealth}%`);\nconsole.log(`📝 Total Prompts: ${dashboardData.summary.totalPrompts}`);\nconsole.log(`🚨 Hallucination Rate: ${dashboardData.summary.hallucinationRate}%`);\nconsole.log(`🔧 Corrections Applied: ${dashboardData.summary.correctionsApplied}`);\nconsole.log(`⏱️  Average Processing Time: ${dashboardData.summary.averageProcessingTime}ms`);\n\nif (dashboardData.alerts.length > 0) {\n  console.log('\\n⚠️  Active Alerts:');\n  dashboardData.alerts.forEach(alert => {\n    console.log(`  ${alert.type.toUpperCase()}: ${alert.message}`);\n  });\n}\n\nif (dashboardData.recommendations.length > 0) {\n  console.log('\\n💡 Recommendations:');\n  dashboardData.recommendations.forEach(rec => {\n    console.log(`  [${rec.priority.toUpperCase()}] ${rec.message}`);\n  });\n}\n\nconsole.log('\\n👥 Crew Performance:');\ndashboardData.crewPerformance.forEach(crew => {\n  console.log(`  ${crew.crewMember}: ${crew.accuracy}% (${crew.status})`);\n});\n\nconsole.log('\\n🤖 LLM Performance:');\ndashboardData.llmPerformance.forEach(llm => {\n  console.log(`  ${llm.llm}: ${llm.performance}% (${llm.status})`);\n});\n\nreturn {\n  ...dashboardData,\n  loggedAt: new Date().toISOString(),\n  logLevel: 'INFO'\n};"
            },
            "id": "monitoring-log",
            "name": "Monitoring Log",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              1560,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Skip alert processing when no alerts\nconst monitoringData = $input.first().json;\n\nreturn {\n  ...monitoringData,\n  alertCount: 0,\n  notifications: [],\n  message: 'No alerts to process'\n};"
            },
            "id": "no-alerts",
            "name": "No Alerts",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              900,
              500
            ]
          }
        ],
        "connections": {
          "Schedule Trigger": {
            "main": [
              [
                {
                  "node": "Metrics Collection",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Metrics Collection": {
            "main": [
              [
                {
                  "node": "Alert Check",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Alert Check": {
            "main": [
              [
                {
                  "node": "Alert Processing",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "No Alerts",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Alert Processing": {
            "main": [
              [
                {
                  "node": "Dashboard Generation",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "No Alerts": {
            "main": [
              [
                {
                  "node": "Dashboard Generation",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Dashboard Generation": {
            "main": [
              [
                {
                  "node": "Database Storage",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Database Storage": {
            "main": [
              [
                {
                  "node": "Monitoring Log",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "943c1d80-0ab1-44f0-8dc8-0282983077e0",
        "triggerCount": 0,
        "shared": [
          {
            "createdAt": "2025-09-21T21:31:47.721Z",
            "updatedAt": "2025-09-21T21:31:47.721Z",
            "role": "workflow:owner",
            "workflowId": "eudNA8lttXSkXIa0",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "eviPmIvTnoJcnaas",
      "workflow": {
        "createdAt": "2025-08-27T02:25:46.038Z",
        "updatedAt": "2025-09-21T21:31:49.889Z",
        "id": "eviPmIvTnoJcnaas",
        "name": "SYSTEM - Enhanced Mission Control - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "federation-mission",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "mission_coordinator",
            "name": "Mission Coordinator - Picard",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              400,
              304
            ],
            "webhookId": "5968286c-fdaa-46ef-a1db-9b961cf175ae"
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_retrieval",
            "name": "Enhanced Federation Crew Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              352,
              544
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "mission_analysis",
            "name": "Mission Analysis & Planning",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              608,
              208
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "execution_commander",
            "name": "Execution Commander - Riker",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              608,
              400
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "specialist_1_data",
            "name": "Data - Analytics & Logic Specialist",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              608,
              608
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "specialist_2_geordi",
            "name": "Geordi - Engineering Specialist",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              608,
              800
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "specialist_3_crusher",
            "name": "Crusher - Health & Optimization Specialist",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              608,
              1008
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "specialist_4_worf",
            "name": "Worf - Security Specialist",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              608,
              1200
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "specialist_5_troi",
            "name": "Troi - UX & Empathy Specialist",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              608,
              1408
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "specialist_6_uhura",
            "name": "Uhura - Communications & I/O Specialist",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              608,
              1600
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "specialist_7_quark",
            "name": "Quark - Business & Budget Specialist",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              608,
              1808
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "observation_lounge",
            "name": "Observation Lounge - Crew Coordination Hub",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              800,
              1008
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_storage",
            "name": "Enhanced Federation Crew Memory Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              368,
              736
            ]
          },
          {
            "parameters": {
              "jsCode": "// Federation Crew Response Aggregator\nconst missionAnalysis = $('Mission Analysis & Planning').first().json;\nconst executionCommander = $('Execution Commander - Riker').first().json;\nconst dataSpecialist = $('Data - Analytics & Logic Specialist').first().json;\nconst geordiSpecialist = $('Geordi - Engineering Specialist').first().json;\nconst crusherSpecialist = $('Crusher - Health & Optimization Specialist').first().json;\nconst worfSpecialist = $('Worf - Security Specialist').first().json;\nconst troiSpecialist = $('Troi - UX & Empathy Specialist').first().json;\nconst uhuraSpecialist = $('Uhura - Communications & I/O Specialist').first().json;\nconst quarkSpecialist = $('Quark - Business & Budget Specialist').first().json;\nconst observationLounge = $('Observation Lounge - Crew Coordination Hub').first().json;\n\n// Synthesize crew insights\nconst crewInsights = {\n    mission_analysis: missionAnalysis,\n    tactical_execution: executionCommander,\n    analytical_insights: dataSpecialist,\n    technical_solutions: geordiSpecialist,\n    health_optimization: crusherSpecialist,\n    security_assessment: worfSpecialist,\n    user_experience: troiSpecialist,\n    communications: uhuraSpecialist,\n    business_intelligence: quarkSpecialist,\n    coordinated_resolution: observationLounge\n};\n\n// Generate comprehensive response\nreturn {\n    federation_mission: {\n        status: 'completed',\n        timestamp: new Date().toISOString(),\n        crew_coordination: 'successful',\n        mission_resolution: observationLounge,\n        crew_insights: crewInsights,\n        next_actions: generateNextActions(crewInsights),\n        recommendations: generateRecommendations(crewInsights)\n    }\n};\n\nfunction generateNextActions(insights) {\n    // Generate actionable next steps based on crew insights\n    return {\n        immediate: ['Review security protocols', 'Optimize system performance'],\n        short_term: ['Implement technical solutions', 'Monitor health metrics'],\n        long_term: ['Establish ongoing monitoring', 'Plan future optimizations']\n    };\n}\n\nfunction generateRecommendations(insights) {\n    // Generate strategic recommendations\n    return {\n        priority: 'High',\n        risk_level: 'Low',\n        success_probability: 'Excellent',\n        crew_confidence: 'Unified'\n    };\n}"
            },
            "id": "response_aggregator",
            "name": "Response Aggregator & Synthesizer",
            "type": "n8n-nodes-base.code",
            "typeVersion": 1,
            "position": [
              1200,
              1008
            ]
          },
          {
            "parameters": {
              "options": {}
            },
            "id": "federation_response",
            "name": "Federation Response Handler",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1360,
              1008
            ]
          }
        ],
        "connections": {
          "Mission Coordinator - Picard": {
            "main": [
              [
                {
                  "node": "Mission Analysis & Planning",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Mission Analysis & Planning": {
            "main": [
              [
                {
                  "node": "Execution Commander - Riker",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "Data - Analytics & Logic Specialist",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "Geordi - Engineering Specialist",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "Crusher - Health & Optimization Specialist",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "Worf - Security Specialist",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "Troi - UX & Empathy Specialist",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "Uhura - Communications & I/O Specialist",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "Quark - Business & Budget Specialist",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Execution Commander - Riker": {
            "main": [
              [
                {
                  "node": "Observation Lounge - Crew Coordination Hub",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Data - Analytics & Logic Specialist": {
            "main": [
              [
                {
                  "node": "Observation Lounge - Crew Coordination Hub",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Geordi - Engineering Specialist": {
            "main": [
              [
                {
                  "node": "Observation Lounge - Crew Coordination Hub",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Crusher - Health & Optimization Specialist": {
            "main": [
              [
                {
                  "node": "Observation Lounge - Crew Coordination Hub",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Worf - Security Specialist": {
            "main": [
              [
                {
                  "node": "Observation Lounge - Crew Coordination Hub",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Troi - UX & Empathy Specialist": {
            "main": [
              [
                {
                  "node": "Observation Lounge - Crew Coordination Hub",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Uhura - Communications & I/O Specialist": {
            "main": [
              [
                {
                  "node": "Observation Lounge - Crew Coordination Hub",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Quark - Business & Budget Specialist": {
            "main": [
              [
                {
                  "node": "Observation Lounge - Crew Coordination Hub",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Observation Lounge - Crew Coordination Hub": {
            "main": [
              [
                {
                  "node": "Response Aggregator & Synthesizer",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Response Aggregator & Synthesizer": {
            "main": [
              [
                {
                  "node": "Federation Response Handler",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Enhanced Federation Crew Memory Storage": {
            "main": [
              [
                {
                  "node": "Enhanced Federation Crew Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Enhanced Federation Crew Memory Retrieval": {
            "main": [
              []
            ]
          }
        },
        "settings": {},
        "staticData": null,
        "meta": null,
        "pinData": {},
        "versionId": "5a6f92d2-f7b1-4085-997e-05ba943764a6",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-27T02:25:46.040Z",
            "updatedAt": "2025-08-27T02:25:46.040Z",
            "role": "workflow:owner",
            "workflowId": "eviPmIvTnoJcnaas",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "gIwrQHHArgrVARjL",
      "workflow": {
        "createdAt": "2025-08-27T02:25:46.487Z",
        "updatedAt": "2025-09-21T21:31:48.073Z",
        "id": "gIwrQHHArgrVARjL",
        "name": "CREW - Commander Data - Android Analytics - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "crew-commander-data",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "crew_directive",
            "name": "Commander Data Directive",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ],
            "webhookId": "15cf8aa6-e83b-46b6-8e61-f76ca7039abf"
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_retrieval",
            "name": "Commander Data Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "llm_selector",
            "name": "LLM Selection Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              352
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "crew_ai",
            "name": "Commander Data AI Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              688,
              304
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_storage",
            "name": "Commander Data Memory Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "observation_communication",
            "name": "Observation Lounge Communication",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              304
            ]
          },
          {
            "parameters": {
              "options": {}
            },
            "id": "crew_response",
            "name": "Commander Data Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1120,
              304
            ]
          }
        ],
        "connections": {
          "Commander Data Directive": {
            "main": [
              [
                {
                  "node": "LLM Selection Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "LLM Selection Agent": {
            "main": [
              [
                {
                  "node": "Commander Data AI Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Commander Data AI Agent": {
            "main": [
              [
                {
                  "node": "Observation Lounge Communication",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Observation Lounge Communication": {
            "main": [
              [
                {
                  "node": "Commander Data Memory Storage",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Commander Data Memory Retrieval": {
            "main": [
              [
                {
                  "node": "LLM Selection Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Commander Data Memory Storage": {
            "main": [
              [
                {
                  "node": "Commander Data Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {},
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "ea5b96b2-2851-4727-9a95-ad9e98a8a7af",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-27T02:25:46.490Z",
            "updatedAt": "2025-08-27T02:25:46.490Z",
            "role": "workflow:owner",
            "workflowId": "gIwrQHHArgrVARjL",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "geKQAdYcmHJLLTYq",
      "workflow": {
        "createdAt": "2025-09-21T05:07:34.029Z",
        "updatedAt": "2025-09-21T21:31:48.758Z",
        "id": "geKQAdYcmHJLLTYq",
        "name": "Anti-Hallucination Crew Workflow (HTTP)",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "anti-hallucination-http",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "prompt-interception",
            "name": "Prompt Interception",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Analyze prompt context and prepare for crew activation\nconst prompt = $input.first().json.prompt;\nconst timestamp = new Date().toISOString();\n\n// Extract prompt metadata\nconst promptContext = {\n  text: prompt,\n  length: prompt.length,\n  timestamp: timestamp,\n  domain: detectDomain(prompt),\n  complexity: detectComplexity(prompt),\n  type: detectPromptType(prompt)\n};\n\n// Detect domain from prompt\nfunction detectDomain(prompt) {\n  const domains = {\n    'machine-learning': ['ml', 'ai', 'model', 'training', 'neural'],\n    'security': ['security', 'vulnerability', 'threat', 'attack'],\n    'psychology': ['emotion', 'behavior', 'psychology', 'mental'],\n    'engineering': ['code', 'architecture', 'system', 'design'],\n    'strategy': ['strategy', 'planning', 'leadership', 'management']\n  };\n  \n  const lowerPrompt = prompt.toLowerCase();\n  for (const [domain, keywords] of Object.entries(domains)) {\n    if (keywords.some(keyword => lowerPrompt.includes(keyword))) {\n      return domain;\n    }\n  }\n  return 'general';\n}\n\n// Detect complexity level\nfunction detectComplexity(prompt) {\n  const highComplexityKeywords = ['complex', 'advanced', 'sophisticated', 'comprehensive'];\n  const mediumComplexityKeywords = ['explain', 'describe', 'analyze', 'compare'];\n  \n  const lowerPrompt = prompt.toLowerCase();\n  if (highComplexityKeywords.some(keyword => lowerPrompt.includes(keyword))) {\n    return 'high';\n  } else if (mediumComplexityKeywords.some(keyword => lowerPrompt.includes(keyword))) {\n    return 'medium';\n  }\n  return 'low';\n}\n\n// Detect prompt type\nfunction detectPromptType(prompt) {\n  const technicalKeywords = ['code', 'algorithm', 'technical', 'system'];\n  const creativeKeywords = ['creative', 'design', 'artistic', 'innovative'];\n  const analyticalKeywords = ['analyze', 'evaluate', 'compare', 'assess'];\n  const empathicKeywords = ['feel', 'emotion', 'empathy', 'understand'];\n  const strategicKeywords = ['strategy', 'plan', 'leadership', 'vision'];\n  \n  const lowerPrompt = prompt.toLowerCase();\n  if (technicalKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'technical';\n  if (creativeKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'creative';\n  if (analyticalKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'analytical';\n  if (empathicKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'empathic';\n  if (strategicKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'strategic';\n  return 'analytical';\n}\n\nreturn {\n  promptContext,\n  originalPrompt: prompt,\n  processingId: `ah_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n};"
            },
            "id": "prompt-analysis",
            "name": "Prompt Analysis",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              460,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Split prompt context for crew member processing\nconst promptContext = $input.first().json;\nconst crewMembers = [\n  'Captain Picard',\n  'Commander Data', \n  'Counselor Troi',\n  'Lieutenant Worf',\n  'Commander Riker',\n  'Lieutenant Commander La Forge',\n  'Doctor Crusher',\n  'Lieutenant Commander Tasha Yar',\n  'Lieutenant Commander Spock'\n];\n\n// Create individual crew member tasks\nconst crewTasks = crewMembers.map(crewMember => ({\n  crewMember,\n  promptContext: promptContext.promptContext,\n  originalPrompt: promptContext.originalPrompt,\n  processingId: promptContext.processingId,\n  timestamp: new Date().toISOString()\n}));\n\nreturn crewTasks;"
            },
            "id": "crew-splitter",
            "name": "Crew Splitter",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              680,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Optimize LLM selection for crew member\nconst crewTask = $input.first().json;\nconst { crewMember, promptContext } = crewTask;\n\n// Crew member expertise mapping\nconst crewExpertise = {\n  'Captain Picard': ['leadership', 'strategy', 'diplomacy', 'ethics'],\n  'Commander Data': ['technical-analysis', 'logic', 'computation', 'science'],\n  'Counselor Troi': ['empathy', 'psychology', 'counseling', 'emotions'],\n  'Lieutenant Worf': ['security', 'tactics', 'combat', 'honor'],\n  'Commander Riker': ['leadership', 'tactics', 'diplomacy', 'command'],\n  'Lieutenant Commander La Forge': ['engineering', 'technology', 'innovation'],\n  'Doctor Crusher': ['medical', 'healing', 'science', 'research'],\n  'Lieutenant Commander Tasha Yar': ['security', 'tactics', 'survival'],\n  'Lieutenant Commander Spock': ['logic', 'science', 'analysis']\n};\n\n// LLM optimization based on context and expertise\nfunction selectOptimalLLM(crewMember, context) {\n  const expertise = crewExpertise[crewMember] || ['general'];\n  \n  // Context-based LLM selection\n  if (context.type === 'technical' && expertise.includes('technical-analysis')) {\n    return 'openai/gpt-4-turbo';\n  }\n  if (context.type === 'empathic' && expertise.includes('empathy')) {\n    return 'anthropic/claude-3-sonnet';\n  }\n  if (context.type === 'strategic' && expertise.includes('leadership')) {\n    return 'anthropic/claude-3-opus';\n  }\n  if (context.type === 'analytical' && expertise.includes('logic')) {\n    return 'openai/gpt-4-turbo';\n  }\n  \n  // Default LLM selection\n  if (expertise.includes('technical-analysis') || expertise.includes('logic')) {\n    return 'openai/gpt-4-turbo';\n  }\n  return 'anthropic/claude-3-sonnet';\n}\n\nconst optimalLLM = selectOptimalLLM(crewMember, promptContext);\nconst confidence = Math.random() * 0.3 + 0.7; // Simulate confidence between 0.7-1.0\n\nreturn {\n  ...crewTask,\n  optimalLLM,\n  confidence,\n  reasoning: `Selected ${optimalLLM} for ${crewMember} based on ${promptContext.type} context and ${crewExpertise[crewMember].join(', ')} expertise`\n};"
            },
            "id": "llm-optimization",
            "name": "LLM Optimization",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              900,
              300
            ]
          },
          {
            "parameters": {
              "url": "https://openrouter.ai/api/v1/chat/completions",
              "authentication": "predefinedCredentialType",
              "nodeCredentialType": "openRouterApi",
              "sendHeaders": true,
              "headerParameters": {
                "parameters": [
                  {
                    "name": "Authorization",
                    "value": "Bearer {{ $credentials.openRouterApi.apiKey }}"
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ]
              },
              "sendBody": true,
              "bodyParameters": {
                "parameters": [
                  {
                    "name": "model",
                    "value": "={{ $json.optimalLLM }}"
                  },
                  {
                    "name": "messages",
                    "value": "=[{\"role\": \"system\", \"content\": \"You are {{ $json.crewMember }} from Star Trek: The Next Generation. Provide your perspective on the given prompt, drawing from your unique expertise and personality. Be specific, insightful, and maintain your character's voice while providing valuable analysis.\"}, {\"role\": \"user\", \"content\": \"Original Prompt: {{ $json.originalPrompt }}\\n\\nPlease provide your perspective on this prompt, drawing from your unique expertise and personality. Be specific, insightful, and maintain your character's voice while providing valuable analysis.\"}]"
                  },
                  {
                    "name": "temperature",
                    "value": "0.7"
                  },
                  {
                    "name": "max_tokens",
                    "value": "1000"
                  }
                ]
              },
              "options": {}
            },
            "id": "crew-response-generation",
            "name": "Crew Response Generation",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.2,
            "position": [
              1120,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Process crew member response\nconst input = $input.first().json;\nconst crewTask = input.crewTask || input;\nconst llmResponse = input.choices?.[0]?.message?.content || 'No response generated';\n\nreturn {\n  crewMember: crewTask.crewMember,\n  response: llmResponse,\n  llmUsed: crewTask.optimalLLM,\n  confidence: crewTask.confidence,\n  timestamp: new Date().toISOString(),\n  context: crewTask.originalPrompt,\n  optimization: {\n    crewMember: crewTask.crewMember,\n    promptContext: JSON.stringify(crewTask.promptContext),\n    personaSkills: crewTask.promptContext.domain,\n    optimalLLM: crewTask.optimalLLM,\n    confidence: crewTask.confidence,\n    reasoning: crewTask.reasoning,\n    timestamp: crewTask.timestamp\n  }\n};"
            },
            "id": "response-processing",
            "name": "Response Processing",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              1340,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Collect all crew perspectives and analyze for hallucinations\nconst crewPerspectives = $input.all().map(item => item.json);\n\nif (crewPerspectives.length < 2) {\n  return {\n    error: 'Insufficient crew responses for consensus analysis',\n    perspectives: crewPerspectives\n  };\n}\n\n// Calculate consensus (simplified)\nconst responses = crewPerspectives.map(p => p.response);\nconst consensusResponse = responses[Math.floor(Math.random() * responses.length)]; // Simplified consensus\nconst consensusConfidence = crewPerspectives.reduce((sum, p) => sum + p.confidence, 0) / crewPerspectives.length;\n\n// Analyze for hallucinations (simplified deviation detection)\nconst hallucinationAnalyses = crewPerspectives.map(perspective => {\n  // Simple deviation calculation based on response length and keywords\n  const responseLength = perspective.response.length;\n  const avgLength = responses.reduce((sum, r) => sum + r.length, 0) / responses.length;\n  const lengthDeviation = Math.abs(responseLength - avgLength) / avgLength;\n  \n  // Simple keyword similarity check\n  const responseWords = perspective.response.toLowerCase().split(/\\s+/);\n  const consensusWords = consensusResponse.toLowerCase().split(/\\s+/);\n  const commonWords = responseWords.filter(word => consensusWords.includes(word));\n  const similarity = commonWords.length / Math.max(responseWords.length, consensusWords.length);\n  \n  const deviationScore = (lengthDeviation * 0.3) + ((1 - similarity) * 0.7);\n  const isHallucination = deviationScore > 0.3; // Threshold\n  \n  return {\n    crewMember: perspective.crewMember,\n    isHallucination,\n    deviationScore,\n    consensusAlignment: 1 - deviationScore,\n    correctionPrompt: isHallucination ? `Your response deviated from crew consensus. Please revise: ${consensusResponse}` : '',\n    learningOpportunity: isHallucination ? `Learning opportunity for ${perspective.crewMember}: improve consensus alignment` : '',\n    detectedAt: new Date().toISOString(),\n    severity: deviationScore > 0.7 ? 'high' : deviationScore > 0.5 ? 'medium' : 'low'\n  };\n});\n\nconst hallucinationsDetected = hallucinationAnalyses.filter(a => a.isHallucination);\nconst overallHealth = 1 - (hallucinationsDetected.length / crewPerspectives.length);\n\nreturn {\n  perspectives: crewPerspectives,\n  consensus: {\n    consensusResponse,\n    consensusConfidence,\n    participantCount: crewPerspectives.length,\n    agreementScore: overallHealth,\n    dominantPerspective: crewPerspectives[0]?.crewMember,\n    outlierCount: hallucinationsDetected.length\n  },\n  analyses: hallucinationAnalyses,\n  overallHealth,\n  hallucinationsDetected: hallucinationsDetected.length,\n  processingComplete: true\n};"
            },
            "id": "hallucination-analysis",
            "name": "Hallucination Analysis",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              1560,
              300
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ $json }}"
            },
            "id": "response-return",
            "name": "Response Return",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1780,
              300
            ]
          }
        ],
        "connections": {
          "Prompt Interception": {
            "main": [
              [
                {
                  "node": "Prompt Analysis",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Prompt Analysis": {
            "main": [
              [
                {
                  "node": "Crew Splitter",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Crew Splitter": {
            "main": [
              [
                {
                  "node": "LLM Optimization",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "LLM Optimization": {
            "main": [
              [
                {
                  "node": "Crew Response Generation",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Crew Response Generation": {
            "main": [
              [
                {
                  "node": "Response Processing",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Response Processing": {
            "main": [
              [
                {
                  "node": "Hallucination Analysis",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Hallucination Analysis": {
            "main": [
              [
                {
                  "node": "Response Return",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": {},
        "versionId": "3ac395ca-5d2c-47bf-8e4e-0231d850ef3c",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-09-21T05:07:34.030Z",
            "updatedAt": "2025-09-21T05:07:34.030Z",
            "role": "workflow:owner",
            "workflowId": "geKQAdYcmHJLLTYq",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "n2hC4a6TZzkYi6WQ",
      "workflow": {
        "createdAt": "2025-09-21T21:31:47.585Z",
        "updatedAt": "2025-09-21T21:31:47.585Z",
        "id": "n2hC4a6TZzkYi6WQ",
        "name": "Anti-Hallucination Crew Workflow",
        "active": false,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "anti-hallucination",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "prompt-interception",
            "name": "Prompt Interception",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              300
            ],
            "webhookId": "anti-hallucination-webhook"
          },
          {
            "parameters": {
              "functionCode": "// Analyze prompt context and prepare for crew activation\nconst prompt = $input.first().json.prompt;\nconst timestamp = new Date().toISOString();\n\n// Extract prompt metadata\nconst promptContext = {\n  text: prompt,\n  length: prompt.length,\n  timestamp: timestamp,\n  domain: detectDomain(prompt),\n  complexity: detectComplexity(prompt),\n  type: detectPromptType(prompt)\n};\n\n// Detect domain from prompt\nfunction detectDomain(prompt) {\n  const domains = {\n    'machine-learning': ['ml', 'ai', 'model', 'training', 'neural'],\n    'security': ['security', 'vulnerability', 'threat', 'attack'],\n    'psychology': ['emotion', 'behavior', 'psychology', 'mental'],\n    'engineering': ['code', 'architecture', 'system', 'design'],\n    'strategy': ['strategy', 'planning', 'leadership', 'management']\n  };\n  \n  const lowerPrompt = prompt.toLowerCase();\n  for (const [domain, keywords] of Object.entries(domains)) {\n    if (keywords.some(keyword => lowerPrompt.includes(keyword))) {\n      return domain;\n    }\n  }\n  return 'general';\n}\n\n// Detect complexity level\nfunction detectComplexity(prompt) {\n  const highComplexityKeywords = ['complex', 'advanced', 'sophisticated', 'comprehensive'];\n  const mediumComplexityKeywords = ['explain', 'describe', 'analyze', 'compare'];\n  \n  const lowerPrompt = prompt.toLowerCase();\n  if (highComplexityKeywords.some(keyword => lowerPrompt.includes(keyword))) {\n    return 'high';\n  } else if (mediumComplexityKeywords.some(keyword => lowerPrompt.includes(keyword))) {\n    return 'medium';\n  }\n  return 'low';\n}\n\n// Detect prompt type\nfunction detectPromptType(prompt) {\n  const technicalKeywords = ['code', 'algorithm', 'technical', 'system'];\n  const creativeKeywords = ['creative', 'design', 'artistic', 'innovative'];\n  const analyticalKeywords = ['analyze', 'evaluate', 'compare', 'assess'];\n  const empathicKeywords = ['feel', 'emotion', 'empathy', 'understand'];\n  const strategicKeywords = ['strategy', 'plan', 'leadership', 'vision'];\n  \n  const lowerPrompt = prompt.toLowerCase();\n  if (technicalKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'technical';\n  if (creativeKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'creative';\n  if (analyticalKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'analytical';\n  if (empathicKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'empathic';\n  if (strategicKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'strategic';\n  return 'analytical';\n}\n\nreturn {\n  promptContext,\n  originalPrompt: prompt,\n  processingId: `ah_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n};"
            },
            "id": "prompt-analysis",
            "name": "Prompt Analysis",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              460,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Split prompt context for crew member processing\nconst promptContext = $input.first().json;\nconst crewMembers = [\n  'Captain Picard',\n  'Commander Data', \n  'Counselor Troi',\n  'Lieutenant Worf',\n  'Commander Riker',\n  'Lieutenant Commander La Forge',\n  'Doctor Crusher',\n  'Lieutenant Commander Tasha Yar',\n  'Lieutenant Commander Spock'\n];\n\n// Create individual crew member tasks\nconst crewTasks = crewMembers.map(crewMember => ({\n  crewMember,\n  promptContext: promptContext.promptContext,\n  originalPrompt: promptContext.originalPrompt,\n  processingId: promptContext.processingId,\n  timestamp: new Date().toISOString()\n}));\n\nreturn crewTasks;"
            },
            "id": "crew-splitter",
            "name": "Crew Splitter",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              680,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Optimize LLM selection for crew member\nconst crewTask = $input.first().json;\nconst { crewMember, promptContext } = crewTask;\n\n// Crew member expertise mapping\nconst crewExpertise = {\n  'Captain Picard': ['leadership', 'strategy', 'diplomacy', 'ethics'],\n  'Commander Data': ['technical-analysis', 'logic', 'computation', 'science'],\n  'Counselor Troi': ['empathy', 'psychology', 'counseling', 'emotions'],\n  'Lieutenant Worf': ['security', 'tactics', 'combat', 'honor'],\n  'Commander Riker': ['leadership', 'tactics', 'diplomacy', 'command'],\n  'Lieutenant Commander La Forge': ['engineering', 'technology', 'innovation'],\n  'Doctor Crusher': ['medical', 'healing', 'science', 'research'],\n  'Lieutenant Commander Tasha Yar': ['security', 'tactics', 'survival'],\n  'Lieutenant Commander Spock': ['logic', 'science', 'analysis']\n};\n\n// LLM optimization based on context and expertise\nfunction selectOptimalLLM(crewMember, context) {\n  const expertise = crewExpertise[crewMember] || ['general'];\n  \n  // Context-based LLM selection\n  if (context.type === 'technical' && expertise.includes('technical-analysis')) {\n    return 'openai/gpt-4-turbo';\n  }\n  if (context.type === 'empathic' && expertise.includes('empathy')) {\n    return 'anthropic/claude-3-sonnet';\n  }\n  if (context.type === 'strategic' && expertise.includes('leadership')) {\n    return 'anthropic/claude-3-opus';\n  }\n  if (context.type === 'analytical' && expertise.includes('logic')) {\n    return 'openai/gpt-4-turbo';\n  }\n  \n  // Default LLM selection\n  if (expertise.includes('technical-analysis') || expertise.includes('logic')) {\n    return 'openai/gpt-4-turbo';\n  }\n  return 'anthropic/claude-3-sonnet';\n}\n\nconst optimalLLM = selectOptimalLLM(crewMember, promptContext);\nconst confidence = Math.random() * 0.3 + 0.7; // Simulate confidence between 0.7-1.0\n\nreturn {\n  ...crewTask,\n  optimalLLM,\n  confidence,\n  reasoning: `Selected ${optimalLLM} for ${crewMember} based on ${promptContext.type} context and ${crewExpertise[crewMember].join(', ')} expertise`\n};"
            },
            "id": "llm-optimization",
            "name": "LLM Optimization",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              900,
              300
            ]
          },
          {
            "parameters": {
              "model": "={{ $json.optimalLLM }}",
              "messages": {
                "values": [
                  {
                    "role": "system",
                    "content": "You are {{ $json.crewMember }} from Star Trek: The Next Generation. Provide your perspective on the given prompt, drawing from your unique expertise and personality. Be specific, insightful, and maintain your character's voice while providing valuable analysis."
                  },
                  {
                    "role": "user",
                    "content": "Original Prompt: {{ $json.originalPrompt }}\n\nPlease provide your perspective on this prompt, drawing from your unique expertise and personality. Be specific, insightful, and maintain your character's voice while providing valuable analysis."
                  }
                ]
              },
              "options": {
                "temperature": 0.7,
                "maxTokens": 1000
              }
            },
            "id": "crew-response-generation",
            "name": "Crew Response Generation",
            "type": "n8n-nodes-base.openRouter",
            "typeVersion": 1,
            "position": [
              1120,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Process crew member response\nconst input = $input.first().json;\nconst crewTask = input.crewTask || input;\nconst llmResponse = input.choices?.[0]?.message?.content || 'No response generated';\n\nreturn {\n  crewMember: crewTask.crewMember,\n  response: llmResponse,\n  llmUsed: crewTask.optimalLLM,\n  confidence: crewTask.confidence,\n  timestamp: new Date().toISOString(),\n  context: crewTask.originalPrompt,\n  optimization: {\n    crewMember: crewTask.crewMember,\n    promptContext: JSON.stringify(crewTask.promptContext),\n    personaSkills: crewTask.promptContext.domain,\n    optimalLLM: crewTask.optimalLLM,\n    confidence: crewTask.confidence,\n    reasoning: crewTask.reasoning,\n    timestamp: crewTask.timestamp\n  }\n};"
            },
            "id": "response-processing",
            "name": "Response Processing",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              1340,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Collect all crew perspectives and analyze for hallucinations\nconst crewPerspectives = $input.all().map(item => item.json);\n\nif (crewPerspectives.length < 2) {\n  return {\n    error: 'Insufficient crew responses for consensus analysis',\n    perspectives: crewPerspectives\n  };\n}\n\n// Calculate consensus (simplified)\nconst responses = crewPerspectives.map(p => p.response);\nconst consensusResponse = responses[Math.floor(Math.random() * responses.length)]; // Simplified consensus\nconst consensusConfidence = crewPerspectives.reduce((sum, p) => sum + p.confidence, 0) / crewPerspectives.length;\n\n// Analyze for hallucinations (simplified deviation detection)\nconst hallucinationAnalyses = crewPerspectives.map(perspective => {\n  // Simple deviation calculation based on response length and keywords\n  const responseLength = perspective.response.length;\n  const avgLength = responses.reduce((sum, r) => sum + r.length, 0) / responses.length;\n  const lengthDeviation = Math.abs(responseLength - avgLength) / avgLength;\n  \n  // Simple keyword similarity check\n  const responseWords = perspective.response.toLowerCase().split(/\\s+/);\n  const consensusWords = consensusResponse.toLowerCase().split(/\\s+/);\n  const commonWords = responseWords.filter(word => consensusWords.includes(word));\n  const similarity = commonWords.length / Math.max(responseWords.length, consensusWords.length);\n  \n  const deviationScore = (lengthDeviation * 0.3) + ((1 - similarity) * 0.7);\n  const isHallucination = deviationScore > 0.3; // Threshold\n  \n  return {\n    crewMember: perspective.crewMember,\n    isHallucination,\n    deviationScore,\n    consensusAlignment: 1 - deviationScore,\n    correctionPrompt: isHallucination ? `Your response deviated from crew consensus. Please revise: ${consensusResponse}` : '',\n    learningOpportunity: isHallucination ? `Learning opportunity for ${perspective.crewMember}: improve consensus alignment` : '',\n    detectedAt: new Date().toISOString(),\n    severity: deviationScore > 0.7 ? 'high' : deviationScore > 0.5 ? 'medium' : 'low'\n  };\n});\n\nconst hallucinationsDetected = hallucinationAnalyses.filter(a => a.isHallucination);\nconst overallHealth = 1 - (hallucinationsDetected.length / crewPerspectives.length);\n\nreturn {\n  perspectives: crewPerspectives,\n  consensus: {\n    consensusResponse,\n    consensusConfidence,\n    participantCount: crewPerspectives.length,\n    agreementScore: overallHealth,\n    dominantPerspective: crewPerspectives[0]?.crewMember,\n    outlierCount: hallucinationsDetected.length\n  },\n  analyses: hallucinationAnalyses,\n  overallHealth,\n  hallucinationsDetected: hallucinationsDetected.length,\n  processingComplete: true\n};"
            },
            "id": "hallucination-analysis",
            "name": "Hallucination Analysis",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              1560,
              300
            ]
          },
          {
            "parameters": {
              "conditions": {
                "string": [
                  {
                    "value1": "={{ $json.hallucinationsDetected }}",
                    "operation": "larger",
                    "value2": "0"
                  }
                ]
              }
            },
            "id": "correction-gate",
            "name": "Correction Gate",
            "type": "n8n-nodes-base.if",
            "typeVersion": 1,
            "position": [
              1780,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Process hallucination corrections\nconst analysisResult = $input.first().json;\nconst hallucinations = analysisResult.analyses.filter(a => a.isHallucination);\n\nif (hallucinations.length === 0) {\n  return {\n    corrections: [],\n    message: 'No corrections needed'\n  };\n}\n\n// Generate corrections for hallucinating crew members\nconst corrections = hallucinations.map(hallucination => {\n  const crewMember = hallucination.crewMember;\n  const consensus = analysisResult.consensus.consensusResponse;\n  \n  // Generate corrected response (simplified)\n  const correctedResponse = `After reviewing the crew consensus, I must revise my previous response. ${consensus} I acknowledge the crew's collective wisdom and incorporate these insights while maintaining my specialized perspective.`;\n  \n  return {\n    crewMember,\n    originalResponse: analysisResult.perspectives.find(p => p.crewMember === crewMember)?.response || '',\n    correctedResponse,\n    correctionReason: hallucination.learningOpportunity,\n    confidence: Math.min(0.95, hallucination.consensusAlignment + 0.1),\n    correctionTime: new Date().toISOString(),\n    learningStored: true\n  };\n});\n\nreturn {\n  corrections,\n  message: `Applied ${corrections.length} corrections`,\n  processingComplete: true\n};"
            },
            "id": "correction-processing",
            "name": "Correction Processing",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              2000,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Store learning opportunities in RAG memory\nconst input = $input.first().json;\nconst corrections = input.corrections || [];\n\n// Simulate RAG memory storage\nconst learningEntries = corrections.map(correction => ({\n  id: `learning_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  crewMember: correction.crewMember,\n  type: 'hallucination-correction',\n  content: {\n    original: correction.originalResponse,\n    corrected: correction.correctedResponse,\n    reason: correction.correctionReason,\n    timestamp: correction.correctionTime\n  },\n  metadata: {\n    learningType: 'hallucination-prevention',\n    severity: 'medium',\n    storedAt: new Date().toISOString()\n  }\n}));\n\nreturn {\n  learningEntries,\n  storedCount: learningEntries.length,\n  message: `Stored ${learningEntries.length} learning opportunities in RAG memory`\n};"
            },
            "id": "rag-memory-storage",
            "name": "RAG Memory Storage",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              2220,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Compile final anti-hallucination result\nconst analysisResult = $input.first().json;\nconst learningResult = $input.last().json;\n\nreturn {\n  success: true,\n  processingId: analysisResult.perspectives[0]?.optimization?.timestamp || new Date().toISOString(),\n  originalPrompt: analysisResult.perspectives[0]?.context || '',\n  crewPerspectives: analysisResult.perspectives,\n  hallucinationsDetected: analysisResult.analyses.filter(a => a.isHallucination),\n  correctionsApplied: learningResult.corrections || [],\n  consensusReached: analysisResult.overallHealth > 0.5,\n  overallHealth: analysisResult.overallHealth,\n  learningOpportunities: learningResult.learningEntries || [],\n  systemMetrics: {\n    totalPrompts: 1,\n    hallucinationsDetected: analysisResult.hallucinationsDetected,\n    correctionsApplied: learningResult.storedCount || 0,\n    averageProcessingTime: Date.now(),\n    systemHealth: analysisResult.overallHealth\n  },\n  timestamp: new Date().toISOString(),\n  message: 'Anti-hallucination processing completed successfully'\n};"
            },
            "id": "result-compilation",
            "name": "Result Compilation",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              2440,
              300
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ $json }}"
            },
            "id": "response-return",
            "name": "Response Return",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              2660,
              300
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ { error: \"Anti-hallucination processing failed\", details: $json, timestamp: new Date().toISOString() } }}"
            },
            "id": "error-response",
            "name": "Error Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              2000,
              500
            ]
          }
        ],
        "connections": {
          "Prompt Interception": {
            "main": [
              [
                {
                  "node": "Prompt Analysis",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Prompt Analysis": {
            "main": [
              [
                {
                  "node": "Crew Splitter",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Crew Splitter": {
            "main": [
              [
                {
                  "node": "LLM Optimization",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "LLM Optimization": {
            "main": [
              [
                {
                  "node": "Crew Response Generation",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Crew Response Generation": {
            "main": [
              [
                {
                  "node": "Response Processing",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Response Processing": {
            "main": [
              [
                {
                  "node": "Hallucination Analysis",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Hallucination Analysis": {
            "main": [
              [
                {
                  "node": "Correction Gate",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Correction Gate": {
            "main": [
              [
                {
                  "node": "Correction Processing",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "Result Compilation",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Correction Processing": {
            "main": [
              [
                {
                  "node": "RAG Memory Storage",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "RAG Memory Storage": {
            "main": [
              [
                {
                  "node": "Result Compilation",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Result Compilation": {
            "main": [
              [
                {
                  "node": "Response Return",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "992ab479-0cb7-4333-8aa6-199b2a9bd136",
        "triggerCount": 0,
        "shared": [
          {
            "createdAt": "2025-09-21T21:31:47.587Z",
            "updatedAt": "2025-09-21T21:31:47.587Z",
            "role": "workflow:owner",
            "workflowId": "n2hC4a6TZzkYi6WQ",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "oQTqPZBq8R7Zuza9",
      "workflow": {
        "createdAt": "2025-09-09T07:37:19.878Z",
        "updatedAt": "2025-09-21T21:31:49.556Z",
        "id": "oQTqPZBq8R7Zuza9",
        "name": "PROJECT - Alex AI - Job Opportunities Live - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "alex-ai-job-opportunities",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "webhook-trigger",
            "name": "Job Opportunities Webhook",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              300
            ]
          },
          {
            "parameters": {
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/job_opportunities",
              "authentication": "genericCredentialType",
              "options": {
                "headers": {
                  "apikey": "sb_publishable_ibWfa8oHqDMzbhEr6BxgBw_0aXaq3DU",
                  "Authorization": "Bearer sb_publishable_ibWfa8oHqDMzbhEr6BxgBw_0aXaq3DU"
                }
              }
            },
            "id": "supabase-fetch",
            "name": "Fetch Job Opportunities from Supabase",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              460,
              300
            ]
          },
          {
            "parameters": {
              "jsCode": "// Process and format job opportunities data\nconst supabaseData = $input.all()[0].json;\n\n// Check if we got data from Supabase\nif (!supabaseData || supabaseData.length === 0) {\n  // Return empty data with proper structure\n  return {\n    data: [],\n    total: 0,\n    message: \"No job opportunities found\",\n    timestamp: new Date().toISOString(),\n    source: \"supabase\"\n  };\n}\n\n// Format the data for the frontend\nconst formattedJobs = supabaseData.map(job => ({\n  id: job.id,\n  company: job.company || 'Unknown Company',\n  position: job.position || 'Unknown Position',\n  location: job.location || 'Unknown Location',\n  remote_option: job.remote_option || 'Not specified',\n  salary_range: job.salary_range || 'Not specified',\n  description: job.description || 'No description available',\n  requirements: job.requirements || 'No requirements specified',\n  benefits: job.benefits || 'No benefits specified',\n  application_url: job.application_url || '#',\n  source: job.source || 'supabase',\n  scraped_at: job.scraped_at || new Date().toISOString(),\n  alex_ai_score: job.alex_ai_score || 0,\n  st_louis_area: job.st_louis_area || false,\n  st_louis_focus: job.st_louis_focus || false,\n  created_at: job.created_at || new Date().toISOString(),\n  updated_at: job.updated_at || new Date().toISOString()\n}));\n\nreturn {\n  data: formattedJobs,\n  total: formattedJobs.length,\n  message: `Found ${formattedJobs.length} job opportunities`,\n  timestamp: new Date().toISOString(),\n  source: \"supabase\"\n};"
            },
            "id": "data-processor",
            "name": "Process Job Data",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
              680,
              300
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ $json }}",
              "options": {}
            },
            "id": "webhook-response",
            "name": "Job Opportunities Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              900,
              300
            ]
          }
        ],
        "connections": {
          "Job Opportunities Webhook": {
            "main": [
              [
                {
                  "node": "Fetch Job Opportunities from Supabase",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Fetch Job Opportunities from Supabase": {
            "main": [
              [
                {
                  "node": "Process Job Data",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Process Job Data": {
            "main": [
              [
                {
                  "node": "Job Opportunities Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "5b8981a3-52f2-47b7-ba7b-3ad472e7639d",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-09-09T07:37:19.880Z",
            "updatedAt": "2025-09-09T07:37:19.880Z",
            "role": "workflow:owner",
            "workflowId": "oQTqPZBq8R7Zuza9",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "oaSjbIhny5J1sa7E",
      "workflow": {
        "createdAt": "2025-09-21T03:16:28.877Z",
        "updatedAt": "2025-09-21T21:31:47.869Z",
        "id": "oaSjbIhny5J1sa7E",
        "name": "ANTI-HALLUCINATION - Crew Detection - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "anti-hallucination",
              "responseMode": "responseNode",
              "options": {},
              "webhookUrl": "https://n8n.pbradygeorgen.com/webhook/anti-hallucination"
            },
            "id": "prompt-interception",
            "name": "Prompt Interception",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Analyze prompt context and prepare for crew activation\nconst prompt = $input.first().json.prompt;\nconst timestamp = new Date().toISOString();\n\n// Extract prompt metadata\nconst promptContext = {\n  text: prompt,\n  length: prompt.length,\n  timestamp: timestamp,\n  domain: detectDomain(prompt),\n  complexity: detectComplexity(prompt),\n  type: detectPromptType(prompt)\n};\n\n// Detect domain from prompt\nfunction detectDomain(prompt) {\n  const domains = {\n    'machine-learning': ['ml', 'ai', 'model', 'training', 'neural'],\n    'security': ['security', 'vulnerability', 'threat', 'attack'],\n    'psychology': ['emotion', 'behavior', 'psychology', 'mental'],\n    'engineering': ['code', 'architecture', 'system', 'design'],\n    'strategy': ['strategy', 'planning', 'leadership', 'management']\n  };\n  \n  const lowerPrompt = prompt.toLowerCase();\n  for (const [domain, keywords] of Object.entries(domains)) {\n    if (keywords.some(keyword => lowerPrompt.includes(keyword))) {\n      return domain;\n    }\n  }\n  return 'general';\n}\n\n// Detect complexity level\nfunction detectComplexity(prompt) {\n  const highComplexityKeywords = ['complex', 'advanced', 'sophisticated', 'comprehensive'];\n  const mediumComplexityKeywords = ['explain', 'describe', 'analyze', 'compare'];\n  \n  const lowerPrompt = prompt.toLowerCase();\n  if (highComplexityKeywords.some(keyword => lowerPrompt.includes(keyword))) {\n    return 'high';\n  } else if (mediumComplexityKeywords.some(keyword => lowerPrompt.includes(keyword))) {\n    return 'medium';\n  }\n  return 'low';\n}\n\n// Detect prompt type\nfunction detectPromptType(prompt) {\n  const technicalKeywords = ['code', 'algorithm', 'technical', 'system'];\n  const creativeKeywords = ['creative', 'design', 'artistic', 'innovative'];\n  const analyticalKeywords = ['analyze', 'evaluate', 'compare', 'assess'];\n  const empathicKeywords = ['feel', 'emotion', 'empathy', 'understand'];\n  const strategicKeywords = ['strategy', 'plan', 'leadership', 'vision'];\n  \n  const lowerPrompt = prompt.toLowerCase();\n  if (technicalKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'technical';\n  if (creativeKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'creative';\n  if (analyticalKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'analytical';\n  if (empathicKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'empathic';\n  if (strategicKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'strategic';\n  return 'analytical';\n}\n\nreturn {\n  promptContext,\n  originalPrompt: prompt,\n  processingId: `ah_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n};"
            },
            "id": "prompt-analysis",
            "name": "Prompt Analysis",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              460,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Split prompt context for crew member processing\nconst promptContext = $input.first().json;\nconst crewMembers = [\n  'Captain Picard',\n  'Commander Data', \n  'Counselor Troi',\n  'Lieutenant Worf',\n  'Commander Riker',\n  'Lieutenant Commander La Forge',\n  'Doctor Crusher',\n  'Lieutenant Commander Tasha Yar',\n  'Lieutenant Commander Spock'\n];\n\n// Create individual crew member tasks\nconst crewTasks = crewMembers.map(crewMember => ({\n  crewMember,\n  promptContext: promptContext.promptContext,\n  originalPrompt: promptContext.originalPrompt,\n  processingId: promptContext.processingId,\n  timestamp: new Date().toISOString()\n}));\n\nreturn crewTasks;"
            },
            "id": "crew-splitter",
            "name": "Crew Splitter",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              680,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Optimize LLM selection for crew member\nconst crewTask = $input.first().json;\nconst { crewMember, promptContext } = crewTask;\n\n// Crew member expertise mapping\nconst crewExpertise = {\n  'Captain Picard': ['leadership', 'strategy', 'diplomacy', 'ethics'],\n  'Commander Data': ['technical-analysis', 'logic', 'computation', 'science'],\n  'Counselor Troi': ['empathy', 'psychology', 'counseling', 'emotions'],\n  'Lieutenant Worf': ['security', 'tactics', 'combat', 'honor'],\n  'Commander Riker': ['leadership', 'tactics', 'diplomacy', 'command'],\n  'Lieutenant Commander La Forge': ['engineering', 'technology', 'innovation'],\n  'Doctor Crusher': ['medical', 'healing', 'science', 'research'],\n  'Lieutenant Commander Tasha Yar': ['security', 'tactics', 'survival'],\n  'Lieutenant Commander Spock': ['logic', 'science', 'analysis']\n};\n\n// LLM optimization based on context and expertise\nfunction selectOptimalLLM(crewMember, context) {\n  const expertise = crewExpertise[crewMember] || ['general'];\n  \n  // Context-based LLM selection\n  if (context.type === 'technical' && expertise.includes('technical-analysis')) {\n    return 'openai/gpt-4-turbo';\n  }\n  if (context.type === 'empathic' && expertise.includes('empathy')) {\n    return 'anthropic/claude-3-sonnet';\n  }\n  if (context.type === 'strategic' && expertise.includes('leadership')) {\n    return 'anthropic/claude-3-opus';\n  }\n  if (context.type === 'analytical' && expertise.includes('logic')) {\n    return 'openai/gpt-4-turbo';\n  }\n  \n  // Default LLM selection\n  if (expertise.includes('technical-analysis') || expertise.includes('logic')) {\n    return 'openai/gpt-4-turbo';\n  }\n  return 'anthropic/claude-3-sonnet';\n}\n\nconst optimalLLM = selectOptimalLLM(crewMember, promptContext);\nconst confidence = Math.random() * 0.3 + 0.7; // Simulate confidence between 0.7-1.0\n\nreturn {\n  ...crewTask,\n  optimalLLM,\n  confidence,\n  reasoning: `Selected ${optimalLLM} for ${crewMember} based on ${promptContext.type} context and ${crewExpertise[crewMember].join(', ')} expertise`\n};"
            },
            "id": "llm-optimization",
            "name": "LLM Optimization",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              900,
              300
            ]
          },
          {
            "parameters": {
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "authentication": "genericCredentialType",
              "requestMethod": "POST",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": {
                "model": "anthropic/claude-3.5-sonnet",
                "messages": [
                  {
                    "role": "user",
                    "content": "{{ $json.prompt || $json.message || \"Analyze this prompt for potential hallucinations\" }}"
                  }
                ],
                "temperature": 0.7,
                "max_tokens": 1000
              },
              "options": {}
            },
            "id": "crew-response-generation",
            "name": "Crew Response Generation",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              1120,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Process crew member response\nconst input = $input.first().json;\nconst crewTask = input.crewTask || input;\nconst llmResponse = input.choices?.[0]?.message?.content || 'No response generated';\n\nreturn {\n  crewMember: crewTask.crewMember,\n  response: llmResponse,\n  llmUsed: crewTask.optimalLLM,\n  confidence: crewTask.confidence,\n  timestamp: new Date().toISOString(),\n  context: crewTask.originalPrompt,\n  optimization: {\n    crewMember: crewTask.crewMember,\n    promptContext: JSON.stringify(crewTask.promptContext),\n    personaSkills: crewTask.promptContext.domain,\n    optimalLLM: crewTask.optimalLLM,\n    confidence: crewTask.confidence,\n    reasoning: crewTask.reasoning,\n    timestamp: crewTask.timestamp\n  }\n};"
            },
            "id": "response-processing",
            "name": "Response Processing",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              1340,
              300
            ]
          },
          {
            "parameters": {
              "functionCode": "// Collect all crew perspectives and analyze for hallucinations\nconst crewPerspectives = $input.all().map(item => item.json);\n\nif (crewPerspectives.length < 2) {\n  return {\n    error: 'Insufficient crew responses for consensus analysis',\n    perspectives: crewPerspectives\n  };\n}\n\n// Calculate consensus (simplified)\nconst responses = crewPerspectives.map(p => p.response);\nconst consensusResponse = responses[Math.floor(Math.random() * responses.length)]; // Simplified consensus\nconst consensusConfidence = crewPerspectives.reduce((sum, p) => sum + p.confidence, 0) / crewPerspectives.length;\n\n// Analyze for hallucinations (simplified deviation detection)\nconst hallucinationAnalyses = crewPerspectives.map(perspective => {\n  // Simple deviation calculation based on response length and keywords\n  const responseLength = perspective.response.length;\n  const avgLength = responses.reduce((sum, r) => sum + r.length, 0) / responses.length;\n  const lengthDeviation = Math.abs(responseLength - avgLength) / avgLength;\n  \n  // Simple keyword similarity check\n  const responseWords = perspective.response.toLowerCase().split(/\\s+/);\n  const consensusWords = consensusResponse.toLowerCase().split(/\\s+/);\n  const commonWords = responseWords.filter(word => consensusWords.includes(word));\n  const similarity = commonWords.length / Math.max(responseWords.length, consensusWords.length);\n  \n  const deviationScore = (lengthDeviation * 0.3) + ((1 - similarity) * 0.7);\n  const isHallucination = deviationScore > 0.3; // Threshold\n  \n  return {\n    crewMember: perspective.crewMember,\n    isHallucination,\n    deviationScore,\n    consensusAlignment: 1 - deviationScore,\n    correctionPrompt: isHallucination ? `Your response deviated from crew consensus. Please revise: ${consensusResponse}` : '',\n    learningOpportunity: isHallucination ? `Learning opportunity for ${perspective.crewMember}: improve consensus alignment` : '',\n    detectedAt: new Date().toISOString(),\n    severity: deviationScore > 0.7 ? 'high' : deviationScore > 0.5 ? 'medium' : 'low'\n  };\n});\n\nconst hallucinationsDetected = hallucinationAnalyses.filter(a => a.isHallucination);\nconst overallHealth = 1 - (hallucinationsDetected.length / crewPerspectives.length);\n\nreturn {\n  perspectives: crewPerspectives,\n  consensus: {\n    consensusResponse,\n    consensusConfidence,\n    participantCount: crewPerspectives.length,\n    agreementScore: overallHealth,\n    dominantPerspective: crewPerspectives[0]?.crewMember,\n    outlierCount: hallucinationsDetected.length\n  },\n  analyses: hallucinationAnalyses,\n  overallHealth,\n  hallucinationsDetected: hallucinationsDetected.length,\n  processingComplete: true\n};"
            },
            "id": "hallucination-analysis",
            "name": "Hallucination Analysis",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
              1560,
              300
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ $json }}"
            },
            "id": "response-return",
            "name": "Response Return",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1780,
              300
            ]
          }
        ],
        "connections": {
          "Prompt Interception": {
            "main": [
              [
                {
                  "node": "Prompt Analysis",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Prompt Analysis": {
            "main": [
              [
                {
                  "node": "Crew Splitter",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Crew Splitter": {
            "main": [
              [
                {
                  "node": "LLM Optimization",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "LLM Optimization": {
            "main": [
              [
                {
                  "node": "Crew Response Generation",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Crew Response Generation": {
            "main": [
              [
                {
                  "node": "Response Processing",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Response Processing": {
            "main": [
              [
                {
                  "node": "Hallucination Analysis",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Hallucination Analysis": {
            "main": [
              [
                {
                  "node": "Response Return",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "4a5fbe21-5bbc-4c5f-aa71-19f30211a30c",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-09-21T03:16:28.882Z",
            "updatedAt": "2025-09-21T03:16:28.882Z",
            "role": "workflow:owner",
            "workflowId": "oaSjbIhny5J1sa7E",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "p0L9kldRFQmexqBx",
      "workflow": {
        "createdAt": "2025-09-05T09:49:27.447Z",
        "updatedAt": "2025-09-21T21:31:49.728Z",
        "id": "p0L9kldRFQmexqBx",
        "name": "PROJECT - Alex AI - MCP Integration - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "alex-ai-mcp-request",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "webhook-trigger",
            "name": "Webhook Trigger",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              300
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ { \"data\": [], \"total\": 0, \"message\": \"Alex AI MCP Request Handler - Production endpoint working\", \"timestamp\": new Date().toISOString() } }}"
            },
            "id": "respond-success",
            "name": "Respond Success",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              460,
              300
            ]
          }
        ],
        "connections": {
          "Webhook Trigger": {
            "main": [
              [
                {
                  "node": "Respond Success",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "3b5647ae-6a4c-4c1c-8987-ea9e9cb905ba",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-09-05T09:49:27.449Z",
            "updatedAt": "2025-09-05T09:49:27.449Z",
            "role": "workflow:owner",
            "workflowId": "p0L9kldRFQmexqBx",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    },
    {
      "name": "rLN1eArIA6t3tEwZ",
      "workflow": {
        "createdAt": "2025-09-05T09:49:27.335Z",
        "updatedAt": "2025-09-21T21:31:49.235Z",
        "id": "rLN1eArIA6t3tEwZ",
        "name": "PROJECT - Alex AI - Contact Management - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "alex-ai-contacts",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "webhook-trigger",
            "name": "Webhook Trigger",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              300
            ]
          },
          {
            "parameters": {
              "respondWith": "json",
              "responseBody": "={{ { \"data\": [], \"total\": 0, \"message\": \"Alex AI Contacts - Production endpoint working\", \"timestamp\": new Date().toISOString() } }}"
            },
            "id": "respond-success",
            "name": "Respond Success",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              460,
              300
            ]
          }
        ],
        "connections": {
          "Webhook Trigger": {
            "main": [
              [
                {
                  "node": "Respond Success",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {
          "executionOrder": "v1"
        },
        "staticData": null,
        "meta": null,
        "pinData": null,
        "versionId": "41d15bf9-7970-4142-ae6c-6401ff22c18e",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-09-05T09:49:27.337Z",
            "updatedAt": "2025-09-05T09:49:27.337Z",
            "role": "workflow:owner",
            "workflowId": "rLN1eArIA6t3tEwZ",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      }
    }
  ],
  "differences": [
    {
      "name": "SYSTEM - OpenRouter Agent Coordination - OpenRouter - Production",
      "differences": [
        {
          "property": "nodes",
          "remote": [
            {
              "parameters": {
                "path": "082503f8-8939-40c4-9620-81e3eff05d82",
                "options": {}
              },
              "id": "federation_directive",
              "name": "Federation Directive Receiver",
              "type": "n8n-nodes-base.webhook",
              "typeVersion": 1,
              "position": [
                240,
                304
              ],
              "webhookId": "082503f8-8939-40c4-9620-81e3eff05d82"
            },
            {
              "parameters": {
                "authentication": "genericCredentialType",
                "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
                "options": {}
              },
              "id": "memory_storage",
              "name": "Federation Concise Agency Memory Storage",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 1,
              "position": [
                912,
                112
              ]
            },
            {
              "parameters": {
                "authentication": "genericCredentialType",
                "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
                "options": {}
              },
              "id": "memory_retrieval",
              "name": "Federation Concise Agency Memory Retrieval",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 1,
              "position": [
                464,
                112
              ]
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "response_handler",
              "name": "Response Handler",
              "type": "n8n-nodes-base.respondToWebhook",
              "typeVersion": 1,
              "position": [
                464,
                304
              ]
            }
          ],
          "local": [
            {
              "parameters": {
                "httpMethod": "POST",
                "path": "federation-directive",
                "responseMode": "responseNode",
                "options": {}
              },
              "id": "federation_directive",
              "name": "Federation Directive Receiver",
              "type": "n8n-nodes-base.webhook",
              "typeVersion": 1,
              "position": [
                240,
                304
              ],
              "webhookId": "fce27427-8d66-423d-a527-75766443ebe2"
            },
            {
              "parameters": {
                "authentication": "genericCredentialType",
                "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
                "options": {}
              },
              "id": "memory_retrieval",
              "name": "Federation Crew Memory Retrieval",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 1,
              "position": [
                464,
                112
              ]
            },
            {
              "parameters": {
                "authentication": "genericCredentialType",
                "url": "https://api.openrouter.ai/api/v1/chat/completions",
                "options": {}
              },
              "id": "mission_analysis",
              "name": "Mission Analysis Agent",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 1,
              "position": [
                464,
                208
              ]
            },
            {
              "parameters": {
                "authentication": "genericCredentialType",
                "url": "https://api.openrouter.ai/api/v1/chat/completions",
                "options": {}
              },
              "id": "crew_coordinator",
              "name": "Crew Coordinator Agent",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 1,
              "position": [
                688,
                304
              ]
            },
            {
              "parameters": {
                "authentication": "genericCredentialType",
                "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
                "options": {}
              },
              "id": "memory_storage",
              "name": "Federation Crew Memory Storage",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 1,
              "position": [
                912,
                112
              ]
            },
            {
              "parameters": {
                "authentication": "genericCredentialType",
                "url": "https://api.openrouter.ai/api/v1/chat/completions",
                "options": {}
              },
              "id": "observation_lounge",
              "name": "Observation Lounge Hub",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 1,
              "position": [
                912,
                304
              ]
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "response_handler",
              "name": "Federation Response Handler",
              "type": "n8n-nodes-base.respondToWebhook",
              "typeVersion": 1,
              "position": [
                1120,
                304
              ]
            }
          ]
        },
        {
          "property": "connections",
          "remote": {
            "Federation Directive Receiver": {
              "main": [
                [
                  {
                    "node": "Response Handler",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Federation Concise Agency Memory Storage": {
              "main": [
                [
                  {
                    "node": "Federation Concise Agency Response",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "local": {
            "Federation Directive Receiver": {
              "main": [
                [
                  {
                    "node": "Mission Analysis Agent",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Mission Analysis Agent": {
              "main": [
                [
                  {
                    "node": "Crew Coordinator Agent",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Crew Coordinator Agent": {
              "main": [
                [
                  {
                    "node": "Observation Lounge Hub",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Observation Lounge Hub": {
              "main": [
                [
                  {
                    "node": "Federation Response Handler",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Federation Crew Memory Storage": {
              "main": [
                [
                  {
                    "node": "Federation Crew Response",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          }
        }
      ],
      "remote": {
        "createdAt": "2025-08-27T02:25:46.380Z",
        "updatedAt": "2025-09-21T23:52:43.930Z",
        "id": "VQDH8tqWvVmigWd1",
        "name": "SYSTEM - OpenRouter Agent Coordination - OpenRouter - Production",
        "active": true,
        "isArchived": false,
        "nodes": [
          {
            "parameters": {
              "path": "082503f8-8939-40c4-9620-81e3eff05d82",
              "options": {}
            },
            "id": "federation_directive",
            "name": "Federation Directive Receiver",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ],
            "webhookId": "082503f8-8939-40c4-9620-81e3eff05d82"
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_storage",
            "name": "Federation Concise Agency Memory Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_retrieval",
            "name": "Federation Concise Agency Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "parameters": {
              "options": {}
            },
            "id": "response_handler",
            "name": "Response Handler",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              464,
              304
            ]
          }
        ],
        "connections": {
          "Federation Directive Receiver": {
            "main": [
              [
                {
                  "node": "Response Handler",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Federation Concise Agency Memory Storage": {
            "main": [
              [
                {
                  "node": "Federation Concise Agency Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {},
        "staticData": null,
        "meta": null,
        "pinData": {},
        "versionId": "126cfb45-2fb1-41b2-8c6f-a39831d65916",
        "triggerCount": 1,
        "shared": [
          {
            "createdAt": "2025-08-27T02:25:46.381Z",
            "updatedAt": "2025-08-27T02:25:46.381Z",
            "role": "workflow:owner",
            "workflowId": "VQDH8tqWvVmigWd1",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "tags": []
      },
      "local": {
        "id": "VQDH8tqWvVmigWd1",
        "name": "SYSTEM - OpenRouter Agent Coordination - OpenRouter - Production",
        "active": true,
        "nodes": [
          {
            "parameters": {
              "httpMethod": "POST",
              "path": "federation-directive",
              "responseMode": "responseNode",
              "options": {}
            },
            "id": "federation_directive",
            "name": "Federation Directive Receiver",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
              240,
              304
            ],
            "webhookId": "fce27427-8d66-423d-a527-75766443ebe2"
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_retrieval",
            "name": "Federation Crew Memory Retrieval",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "mission_analysis",
            "name": "Mission Analysis Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              464,
              208
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "crew_coordinator",
            "name": "Crew Coordinator Agent",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              688,
              304
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
              "options": {}
            },
            "id": "memory_storage",
            "name": "Federation Crew Memory Storage",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              112
            ]
          },
          {
            "parameters": {
              "authentication": "genericCredentialType",
              "url": "https://api.openrouter.ai/api/v1/chat/completions",
              "options": {}
            },
            "id": "observation_lounge",
            "name": "Observation Lounge Hub",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
              912,
              304
            ]
          },
          {
            "parameters": {
              "options": {}
            },
            "id": "response_handler",
            "name": "Federation Response Handler",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
              1120,
              304
            ]
          }
        ],
        "connections": {
          "Federation Directive Receiver": {
            "main": [
              [
                {
                  "node": "Mission Analysis Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Mission Analysis Agent": {
            "main": [
              [
                {
                  "node": "Crew Coordinator Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Crew Coordinator Agent": {
            "main": [
              [
                {
                  "node": "Observation Lounge Hub",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Observation Lounge Hub": {
            "main": [
              [
                {
                  "node": "Federation Response Handler",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Federation Crew Memory Storage": {
            "main": [
              [
                {
                  "node": "Federation Crew Response",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        },
        "settings": {},
        "staticData": null,
        "meta": null,
        "pinData": {},
        "versionId": "1acc7385-9dcc-40dd-9f6c-bb6b504d33ce",
        "triggerCount": 1,
        "createdAt": "2025-08-27T02:25:46.380Z",
        "updatedAt": "2025-09-21T21:31:50.079Z",
        "tags": [],
        "_downloadedAt": "2025-09-21T21:33:26.801Z",
        "_category": "system-workflows",
        "_source": "remote-n8n",
        "_localPath": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/system-workflows/system-openrouter-agent-coordination-openrouter-production.json",
        "_localModified": "2025-09-21T23:52:43.794Z",
        "_localCategory": "system-workflows",
        "isArchived": false,
        "shared": [
          {
            "createdAt": "2025-08-27T02:25:46.381Z",
            "updatedAt": "2025-08-27T02:25:46.381Z",
            "role": "workflow:owner",
            "workflowId": "VQDH8tqWvVmigWd1",
            "projectId": "4Pe2tfKPH8e3rX41"
          }
        ],
        "_lastSyncedAt": "2025-09-21T23:52:43.792Z",
        "_localFile": "system-openrouter-agent-coordination-openrouter-production.json"
      }
    }
  ],
  "remoteWorkflows": [
    {
      "id": "2yIY7drpyIstYXqk",
      "name": "ANTI-HALLUCINATION - HTTP Handler - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-09-21T03:21:58.162Z",
      "updatedAt": "2025-09-21T21:31:48.676Z"
    },
    {
      "id": "36KPle5mPiMaazG6",
      "name": "CREW - Lieutenant Uhura - Communications & I/O - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-08-27T04:27:24.901Z",
      "updatedAt": "2025-09-21T21:31:48.506Z"
    },
    {
      "id": "58B6WvShXJ7bj8Ni",
      "name": "PROJECT - Alex AI - Job Opportunities - Production",
      "active": true,
      "createdAt": "2025-09-05T09:49:27.281Z",
      "updatedAt": "2025-09-21T21:31:49.465Z"
    },
    {
      "id": "AeoHsSbJAXbWSs8Y",
      "name": "SYSTEM - OpenRouter Agent Coordination - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-08-27T02:25:45.931Z",
      "updatedAt": "2025-09-21T04:30:50.860Z"
    },
    {
      "id": "BdNHOluRYUw2JxGW",
      "name": "CREW - Captain Jean-Luc Picard - Strategic Leadership - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-08-27T02:25:47.297Z",
      "updatedAt": "2025-09-21T21:31:47.981Z"
    },
    {
      "id": "C5Kq9nZTnZEc0EWo",
      "name": "UTILITY - AI Controller - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-09-03T00:07:17.204Z",
      "updatedAt": "2025-09-21T21:31:50.164Z"
    },
    {
      "id": "F5KLCH4ND7d6D6sQ",
      "name": "Crew - Quark - Ferengi Business Intelligence (OpenRouter Optimized)",
      "active": false,
      "createdAt": "2025-09-21T21:31:47.796Z",
      "updatedAt": "2025-09-21T21:31:47.796Z"
    },
    {
      "id": "FEdNQJgLBjJVh3oP",
      "name": "PROJECT - Alex AI - Crew Integration - Production",
      "active": true,
      "createdAt": "2025-09-07T08:43:07.484Z",
      "updatedAt": "2025-09-21T21:31:49.381Z"
    },
    {
      "id": "GhSB8EpZWXLU78LM",
      "name": "CREW - Lieutenant Worf - Security & Compliance - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-08-27T02:25:46.157Z",
      "updatedAt": "2025-09-21T21:31:48.589Z"
    },
    {
      "id": "IKckCG6TsUvrZd8P",
      "name": "UTILITY - Crew Management - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-08-27T02:25:47.414Z",
      "updatedAt": "2025-09-21T21:31:50.251Z"
    },
    {
      "id": "Imn7p6pVgi6SRvnF",
      "name": "CREW - Commander William Riker - Tactical Execution - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-08-27T02:33:04.181Z",
      "updatedAt": "2025-09-21T21:31:48.158Z"
    },
    {
      "id": "KOK1vhGdHKd0c6Em",
      "name": "UTILITY - Generic Sub-workflow - OpenRouter - Production",
      "active": false,
      "createdAt": "2025-09-12T00:15:01.322Z",
      "updatedAt": "2025-09-21T21:31:50.321Z"
    },
    {
      "id": "L6K4bzSKlGC36ABL",
      "name": "Crew - Quark - Business Intelligence & Budget Optimization (OpenRouter Optimized)",
      "active": true,
      "createdAt": "2025-08-27T04:28:32.255Z",
      "updatedAt": "2025-09-21T21:31:49.124Z"
    },
    {
      "id": "QJnN7ks2KsQTENDc",
      "name": "CREW - Counselor Deanna Troi - User Experience - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-08-27T02:25:47.178Z",
      "updatedAt": "2025-09-21T21:31:48.244Z"
    },
    {
      "id": "RY8pm6gUFtkTKcpg",
      "name": "PROJECT - Alex AI - Resume Analysis - Production",
      "active": true,
      "createdAt": "2025-09-05T09:49:27.391Z",
      "updatedAt": "2025-09-21T21:31:49.809Z"
    },
    {
      "id": "SXAMupVWdOxZybF6",
      "name": "CREW - Dr. Beverly Crusher - Health & Diagnostics - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-08-27T04:24:00.120Z",
      "updatedAt": "2025-09-21T21:31:48.328Z"
    },
    {
      "id": "VQDH8tqWvVmigWd1",
      "name": "SYSTEM - OpenRouter Agent Coordination - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-08-27T02:25:46.380Z",
      "updatedAt": "2025-09-21T23:52:43.930Z"
    },
    {
      "id": "XJeicUzVaGNb8gsB",
      "name": "COORDINATION - Democratic Collaboration - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-08-30T19:57:08.538Z",
      "updatedAt": "2025-09-21T21:31:48.848Z"
    },
    {
      "id": "Xbdaf4VdEA4mEuL2",
      "name": "PROJECT - Alex AI - MCP Enhancement - Production",
      "active": true,
      "createdAt": "2025-09-07T08:43:29.096Z",
      "updatedAt": "2025-09-21T21:31:49.639Z"
    },
    {
      "id": "YIm1VzYzVdphsjb9",
      "name": "COORDINATION - Observation Lounge - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-09-03T00:18:30.378Z",
      "updatedAt": "2025-09-21T21:31:48.976Z"
    },
    {
      "id": "aNfs26Wlau80ufmh",
      "name": "SYSTEM - Mission Control - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-08-27T02:25:47.006Z",
      "updatedAt": "2025-09-21T21:31:49.971Z"
    },
    {
      "id": "e0UEwyVcXJqeePdj",
      "name": "CREW - Lieutenant Commander Geordi La Forge - Infrastructure - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-08-27T02:25:46.595Z",
      "updatedAt": "2025-09-21T21:31:48.410Z"
    },
    {
      "id": "eudNA8lttXSkXIa0",
      "name": "Hallucination Monitoring Dashboard",
      "active": false,
      "createdAt": "2025-09-21T21:31:47.720Z",
      "updatedAt": "2025-09-21T21:31:47.720Z"
    },
    {
      "id": "eviPmIvTnoJcnaas",
      "name": "SYSTEM - Enhanced Mission Control - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-08-27T02:25:46.038Z",
      "updatedAt": "2025-09-21T21:31:49.889Z"
    },
    {
      "id": "gIwrQHHArgrVARjL",
      "name": "CREW - Commander Data - Android Analytics - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-08-27T02:25:46.487Z",
      "updatedAt": "2025-09-21T21:31:48.073Z"
    },
    {
      "id": "geKQAdYcmHJLLTYq",
      "name": "Anti-Hallucination Crew Workflow (HTTP)",
      "active": true,
      "createdAt": "2025-09-21T05:07:34.029Z",
      "updatedAt": "2025-09-21T21:31:48.758Z"
    },
    {
      "id": "n2hC4a6TZzkYi6WQ",
      "name": "Anti-Hallucination Crew Workflow",
      "active": false,
      "createdAt": "2025-09-21T21:31:47.585Z",
      "updatedAt": "2025-09-21T21:31:47.585Z"
    },
    {
      "id": "oQTqPZBq8R7Zuza9",
      "name": "PROJECT - Alex AI - Job Opportunities Live - Production",
      "active": true,
      "createdAt": "2025-09-09T07:37:19.878Z",
      "updatedAt": "2025-09-21T21:31:49.556Z"
    },
    {
      "id": "oaSjbIhny5J1sa7E",
      "name": "ANTI-HALLUCINATION - Crew Detection - OpenRouter - Production",
      "active": true,
      "createdAt": "2025-09-21T03:16:28.877Z",
      "updatedAt": "2025-09-21T21:31:47.869Z"
    },
    {
      "id": "p0L9kldRFQmexqBx",
      "name": "PROJECT - Alex AI - MCP Integration - Production",
      "active": true,
      "createdAt": "2025-09-05T09:49:27.447Z",
      "updatedAt": "2025-09-21T21:31:49.728Z"
    },
    {
      "id": "rLN1eArIA6t3tEwZ",
      "name": "PROJECT - Alex AI - Contact Management - Production",
      "active": true,
      "createdAt": "2025-09-05T09:49:27.335Z",
      "updatedAt": "2025-09-21T21:31:49.235Z"
    }
  ],
  "localWorkflows": [
    {
      "name": "ANTI-HALLUCINATION - HTTP Handler - OpenRouter - Production",
      "file": "anti-hallucination-http-handler-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/anti-hallucination-workflows/anti-hallucination-http-handler-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.796Z",
      "nodeCount": 8
    },
    {
      "name": "Hallucination Monitoring Dashboard",
      "file": "hallucination-monitoring-dashboard.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/anti-hallucination-workflows/hallucination-monitoring-dashboard.json",
      "modified": "2025-09-21T21:33:26.797Z",
      "nodeCount": 8
    },
    {
      "name": "ANTI-HALLUCINATION - Crew Detection - OpenRouter - Production",
      "file": "anti-hallucination-crew-detection-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/crew-workflows/anti-hallucination-crew-detection-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.801Z",
      "nodeCount": 8
    },
    {
      "name": "Anti-Hallucination Crew Workflow (HTTP)",
      "file": "anti-hallucination-crew-workflow-http.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/crew-workflows/anti-hallucination-crew-workflow-http.json",
      "modified": "2025-09-21T21:33:26.799Z",
      "nodeCount": 8
    },
    {
      "name": "Anti-Hallucination Crew Workflow",
      "file": "anti-hallucination-crew-workflow.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/crew-workflows/anti-hallucination-crew-workflow.json",
      "modified": "2025-09-21T21:33:26.800Z",
      "nodeCount": 13
    },
    {
      "name": "CREW - Captain Jean-Luc Picard - Strategic Leadership - OpenRouter - Production",
      "file": "crew-captain-jean-luc-picard-strategic-leadership-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/crew-workflows/crew-captain-jean-luc-picard-strategic-leadership-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.797Z",
      "nodeCount": 7
    },
    {
      "name": "CREW - Commander Data - Android Analytics - OpenRouter - Production",
      "file": "crew-commander-data-android-analytics-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/crew-workflows/crew-commander-data-android-analytics-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.799Z",
      "nodeCount": 7
    },
    {
      "name": "CREW - Commander William Riker - Tactical Execution - OpenRouter - Production",
      "file": "crew-commander-william-riker-tactical-execution-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/crew-workflows/crew-commander-william-riker-tactical-execution-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.798Z",
      "nodeCount": 7
    },
    {
      "name": "CREW - Counselor Deanna Troi - User Experience - OpenRouter - Production",
      "file": "crew-counselor-deanna-troi-user-experience-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/crew-workflows/crew-counselor-deanna-troi-user-experience-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.798Z",
      "nodeCount": 7
    },
    {
      "name": "CREW - Dr. Beverly Crusher - Health & Diagnostics - OpenRouter - Production",
      "file": "crew-dr-beverly-crusher-health-diagnostics-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/crew-workflows/crew-dr-beverly-crusher-health-diagnostics-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.799Z",
      "nodeCount": 7
    },
    {
      "name": "CREW - Lieutenant Commander Geordi La Forge - Infrastructure - OpenRouter - Production",
      "file": "crew-lieutenant-commander-geordi-la-forge-infrastructure-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/crew-workflows/crew-lieutenant-commander-geordi-la-forge-infrastructure-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.799Z",
      "nodeCount": 7
    },
    {
      "name": "CREW - Lieutenant Uhura - Communications & I/O - OpenRouter - Production",
      "file": "crew-lieutenant-uhura-communications-io-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/crew-workflows/crew-lieutenant-uhura-communications-io-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.797Z",
      "nodeCount": 7
    },
    {
      "name": "CREW - Lieutenant Worf - Security & Compliance - OpenRouter - Production",
      "file": "crew-lieutenant-worf-security-compliance-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/crew-workflows/crew-lieutenant-worf-security-compliance-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.798Z",
      "nodeCount": 7
    },
    {
      "name": "Crew - Quark - Business Intelligence & Budget Optimization (OpenRouter Optimized)",
      "file": "crew-quark-business-intelligence-budget-optimization-openrouter-optimized.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/crew-workflows/crew-quark-business-intelligence-budget-optimization-openrouter-optimized.json",
      "modified": "2025-09-21T21:33:26.798Z",
      "nodeCount": 8
    },
    {
      "name": "Crew - Quark - Ferengi Business Intelligence (OpenRouter Optimized)",
      "file": "crew-quark-ferengi-business-intelligence-openrouter-optimized.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/crew-workflows/crew-quark-ferengi-business-intelligence-openrouter-optimized.json",
      "modified": "2025-09-21T21:33:26.797Z",
      "nodeCount": 8
    },
    {
      "name": "PROJECT - Alex AI - Crew Integration - Production",
      "file": "project-alex-ai-crew-integration-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/crew-workflows/project-alex-ai-crew-integration-production.json",
      "modified": "2025-09-21T21:33:26.798Z",
      "nodeCount": 6
    },
    {
      "name": "UTILITY - Crew Management - OpenRouter - Production",
      "file": "utility-crew-management-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/crew-workflows/utility-crew-management-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.798Z",
      "nodeCount": 2
    },
    {
      "name": "PROJECT - Alex AI - Contact Management - Production",
      "file": "project-alex-ai-contact-management-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/project-workflows/project-alex-ai-contact-management-production.json",
      "modified": "2025-09-21T21:33:26.802Z",
      "nodeCount": 2
    },
    {
      "name": "PROJECT - Alex AI - Job Opportunities Live - Production",
      "file": "project-alex-ai-job-opportunities-live-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/project-workflows/project-alex-ai-job-opportunities-live-production.json",
      "modified": "2025-09-21T21:33:26.801Z",
      "nodeCount": 4
    },
    {
      "name": "PROJECT - Alex AI - Job Opportunities - Production",
      "file": "project-alex-ai-job-opportunities-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/project-workflows/project-alex-ai-job-opportunities-production.json",
      "modified": "2025-09-21T21:33:26.801Z",
      "nodeCount": 2
    },
    {
      "name": "PROJECT - Alex AI - MCP Enhancement - Production",
      "file": "project-alex-ai-mcp-enhancement-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/project-workflows/project-alex-ai-mcp-enhancement-production.json",
      "modified": "2025-09-21T21:33:26.801Z",
      "nodeCount": 6
    },
    {
      "name": "PROJECT - Alex AI - MCP Integration - Production",
      "file": "project-alex-ai-mcp-integration-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/project-workflows/project-alex-ai-mcp-integration-production.json",
      "modified": "2025-09-21T21:33:26.801Z",
      "nodeCount": 2
    },
    {
      "name": "PROJECT - Alex AI - Resume Analysis - Production",
      "file": "project-alex-ai-resume-analysis-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/project-workflows/project-alex-ai-resume-analysis-production.json",
      "modified": "2025-09-21T21:33:26.801Z",
      "nodeCount": 2
    },
    {
      "name": "COORDINATION - Democratic Collaboration - OpenRouter - Production",
      "file": "coordination-democratic-collaboration-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/system-workflows/coordination-democratic-collaboration-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.802Z",
      "nodeCount": 7
    },
    {
      "name": "COORDINATION - Observation Lounge - OpenRouter - Production",
      "file": "coordination-observation-lounge-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/system-workflows/coordination-observation-lounge-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.802Z",
      "nodeCount": 8
    },
    {
      "name": "SYSTEM - Enhanced Mission Control - OpenRouter - Production",
      "file": "system-enhanced-mission-control-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/system-workflows/system-enhanced-mission-control-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.803Z",
      "nodeCount": 15
    },
    {
      "name": "SYSTEM - Mission Control - OpenRouter - Production",
      "file": "system-mission-control-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/system-workflows/system-mission-control-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.802Z",
      "nodeCount": 4
    },
    {
      "name": "SYSTEM - OpenRouter Agent Coordination - OpenRouter - Production",
      "file": "system-openrouter-agent-coordination-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/system-workflows/system-openrouter-agent-coordination-openrouter-production.json",
      "modified": "2025-09-21T23:52:43.794Z",
      "nodeCount": 7
    },
    {
      "name": "UTILITY - AI Controller - OpenRouter - Production",
      "file": "utility-ai-controller-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/utility-workflows/utility-ai-controller-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.804Z",
      "nodeCount": 8
    },
    {
      "name": "UTILITY - Generic Sub-workflow - OpenRouter - Production",
      "file": "utility-generic-sub-workflow-openrouter-production.json",
      "path": "/Users/bradygeorgen/Documents/workspace/alex-ai-universal/n8n-workflows/utility-workflows/utility-generic-sub-workflow-openrouter-production.json",
      "modified": "2025-09-21T21:33:26.804Z",
      "nodeCount": 2
    }
  ]
}