{
  "createdAt": "2025-08-27T04:28:32.255Z",
  "updatedAt": "2025-09-21T07:44:34.596Z",
  "id": "L6K4bzSKlGC36ABL",
  "name": "Crew - Quark - Business Intelligence & Budget Optimization (OpenRouter Optimized)",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "crew-quark-optimized",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "quark-directive-webhook",
      "name": "Quark Directive",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        304
      ]
    },
    {
      "parameters": {
        "functionCode": "// Analyze prompt context for Quark's business optimization\nconst prompt = $input.first().json.prompt || $input.first().json.body?.prompt || $input.first().json.message;\nconst timestamp = new Date().toISOString();\n\n// Extract business context\nconst businessContext = {\n  text: prompt,\n  length: prompt.length,\n  timestamp: timestamp,\n  domain: detectBusinessDomain(prompt),\n  complexity: detectComplexity(prompt),\n  type: detectPromptType(prompt),\n  profitability: detectProfitability(prompt),\n  negotiation: detectNegotiation(prompt)\n};\n\n// Detect business domain from prompt\nfunction detectBusinessDomain(prompt) {\n  const domains = {\n    'financial': ['budget', 'cost', 'price', 'revenue', 'profit', 'financial', 'money'],\n    'negotiation': ['negotiate', 'deal', 'contract', 'agreement', 'bargain'],\n    'strategy': ['strategy', 'plan', 'business', 'market', 'competition'],\n    'operations': ['process', 'workflow', 'efficiency', 'optimization'],\n    'sales': ['sales', 'marketing', 'customer', 'client', 'pitch']\n  };\n  \n  const lowerPrompt = prompt.toLowerCase();\n  for (const [domain, keywords] of Object.entries(domains)) {\n    if (keywords.some(keyword => lowerPrompt.includes(keyword))) {\n      return domain;\n    }\n  }\n  return 'general-business';\n}\n\n// Detect complexity level\nfunction detectComplexity(prompt) {\n  const highComplexityKeywords = ['complex', 'advanced', 'sophisticated', 'comprehensive', 'multi-faceted'];\n  const mediumComplexityKeywords = ['explain', 'describe', 'analyze', 'compare', 'evaluate'];\n  \n  const lowerPrompt = prompt.toLowerCase();\n  if (highComplexityKeywords.some(keyword => lowerPrompt.includes(keyword))) {\n    return 'high';\n  } else if (mediumComplexityKeywords.some(keyword => lowerPrompt.includes(keyword))) {\n    return 'medium';\n  }\n  return 'low';\n}\n\n// Detect prompt type\nfunction detectPromptType(prompt) {\n  const analyticalKeywords = ['analyze', 'evaluate', 'assess', 'review'];\n  const creativeKeywords = ['create', 'design', 'develop', 'innovate'];\n  const strategicKeywords = ['strategy', 'plan', 'optimize', 'improve'];\n  const tacticalKeywords = ['implement', 'execute', 'action', 'do'];\n  \n  const lowerPrompt = prompt.toLowerCase();\n  if (analyticalKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'analytical';\n  if (creativeKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'creative';\n  if (strategicKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'strategic';\n  if (tacticalKeywords.some(keyword => lowerPrompt.includes(keyword))) return 'tactical';\n  return 'analytical';\n}\n\n// Detect profitability focus\nfunction detectProfitability(prompt) {\n  const profitabilityKeywords = ['profit', 'revenue', 'cost', 'budget', 'ROI', 'return', 'money'];\n  const lowerPrompt = prompt.toLowerCase();\n  return profitabilityKeywords.some(keyword => lowerPrompt.includes(keyword));\n}\n\n// Detect negotiation elements\nfunction detectNegotiation(prompt) {\n  const negotiationKeywords = ['negotiate', 'deal', 'contract', 'agreement', 'bargain', 'terms'];\n  const lowerPrompt = prompt.toLowerCase();\n  return negotiationKeywords.some(keyword => lowerPrompt.includes(keyword));\n}\n\nreturn {\n  businessContext,\n  originalPrompt: prompt,\n  processingId: `quark_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  crewMember: 'Quark'\n};"
      },
      "id": "business-context-analysis",
      "name": "Business Context Analysis",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        464,
        304
      ]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories?crew_member=eq.Quark&select=*&order=created_at.desc&limit=10",
        "options": {}
      },
      "id": "quark-memory-retrieval",
      "name": "Quark Memory Retrieval",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        464,
        112
      ]
    },
    {
      "parameters": {
        "functionCode": "// Optimize LLM selection for Quark based on business context\nconst businessContext = $input.first().json.businessContext;\nconst crewMember = 'Quark';\n\n// Quark's business expertise mapping\nconst quarkExpertise = {\n  'financial': ['cost-optimization', 'budget-analysis', 'revenue-maximization'],\n  'negotiation': ['deal-making', 'contract-optimization', 'bargaining'],\n  'strategy': ['business-strategy', 'market-analysis', 'competitive-advantage'],\n  'operations': ['process-optimization', 'efficiency-improvement', 'resource-allocation'],\n  'sales': ['sales-strategy', 'customer-relationship', 'pitch-optimization']\n};\n\n// LLM optimization based on business context and Quark's expertise\nfunction selectOptimalLLMForQuark(context) {\n  const expertise = quarkExpertise[context.domain] || ['general-business'];\n  \n  // Context-based LLM selection for business optimization\n  if (context.type === 'analytical' && context.profitability) {\n    return 'openai/gpt-4o'; // Best for financial analysis and ROI calculations\n  }\n  if (context.type === 'strategic' && context.domain === 'strategy') {\n    return 'anthropic/claude-3-opus'; // Best for complex business strategy\n  }\n  if (context.negotiation || context.domain === 'negotiation') {\n    return 'openai/gpt-4-turbo'; // Best for negotiation tactics and deal-making\n  }\n  if (context.type === 'creative' && context.domain === 'sales') {\n    return 'anthropic/claude-3-sonnet'; // Best for creative sales approaches\n  }\n  if (context.complexity === 'high') {\n    return 'anthropic/claude-3-opus'; // Best for complex business problems\n  }\n  if (context.complexity === 'low') {\n    return 'anthropic/claude-3-haiku'; // Cost-effective for simple queries\n  }\n  \n  // Default: GPT-4o for general business optimization\n  return 'openai/gpt-4o';\n}\n\nconst optimalLLM = selectOptimalLLMForQuark(businessContext);\nconst confidence = Math.random() * 0.3 + 0.7; // Simulate confidence between 0.7-1.0\n\n// Generate Quark-specific reasoning\nconst reasoning = `Selected ${optimalLLM} for Quark based on ${businessContext.type} ${businessContext.domain} context. ` +\n  `Quark's expertise: ${quarkExpertise[businessContext.domain]?.join(', ') || 'general-business'}. ` +\n  `Profitability focus: ${businessContext.profitability ? 'Yes' : 'No'}, ` +\n  `Negotiation elements: ${businessContext.negotiation ? 'Yes' : 'No'}, ` +\n  `Complexity: ${businessContext.complexity}`;\n\nreturn {\n  crewMember,\n  optimalLLM,\n  confidence,\n  reasoning,\n  businessContext,\n  originalPrompt: $input.first().json.originalPrompt,\n  processingId: $input.first().json.processingId,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "llm-optimization-quark",
      "name": "LLM Optimization for Quark",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        688,
        304
      ]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "url": "https://api.openrouter.ai/api/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.genericCredentialType.password }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "={{ $json.optimalLLM }}"
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"system\", \"content\": \"You are Quark, a Ferengi entrepreneur and businessman from Star Trek: Deep Space Nine. You excel in business strategy, negotiation, and finding profitable opportunities. Your responses should demonstrate:\\n\\n1. **Business Acumen**: Focus on profit potential, cost optimization, and ROI\\n2. **Negotiation Skills**: Always consider deal-making and bargaining opportunities\\n3. **Resource Optimization**: Find ways to maximize value while minimizing costs\\n4. **Market Awareness**: Consider competitive advantages and market positioning\\n5. **Ferengi Perspective**: Maintain your entrepreneurial spirit and profit-driven mindset\\n\\nProvide responses that are practical, business-focused, and always consider the profit potential of any solution. Use business terminology and include specific recommendations when possible.\"}, {\"role\": \"user\", \"content\": \"Original Prompt: {{ $json.originalPrompt }}\\n\\nBusiness Context: {{ JSON.stringify($json.businessContext) }}\\n\\nPlease provide your business perspective on this prompt, drawing from your expertise in negotiation, cost optimization, and profit maximization. Be specific about business opportunities and practical implementation strategies.\"}]"
            },
            {
              "name": "temperature",
              "value": "0.7"
            },
            {
              "name": "max_tokens",
              "value": "1200"
            }
          ]
        },
        "options": {}
      },
      "id": "quark-ai-agent-optimized",
      "name": "Quark AI Agent (OpenRouter Optimized)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        912,
        304
      ]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "url": "https://rpkkkbufdwxmjaerbhbn.supabase.co/rest/v1/crew_memories",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.genericCredentialType.username }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=minimal"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "crew_member",
              "value": "Quark"
            },
            {
              "name": "memory_type",
              "value": "business_interaction"
            },
            {
              "name": "content",
              "value": "={{ $json.choices[0].message.content }}"
            },
            {
              "name": "context",
              "value": "={{ $json.originalPrompt || $input.first().json.originalPrompt }}"
            },
            {
              "name": "metadata",
              "value": "={{ JSON.stringify({ llm_used: $json.optimalLLM, confidence: $json.confidence, reasoning: $json.reasoning, business_context: $json.businessContext, timestamp: new Date().toISOString() }) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "quark-memory-storage-optimized",
      "name": "Quark Memory Storage (Optimized)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        912,
        112
      ]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "url": "https://api.openrouter.ai/api/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.genericCredentialType.password }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "anthropic/claude-3-haiku"
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"system\", \"content\": \"You are Quark preparing a brief summary for the Observation Lounge. Create a concise, business-focused summary that highlights the key business insights and profit opportunities from your analysis. Keep it under 100 words and maintain your entrepreneurial perspective.\"}, {\"role\": \"user\", \"content\": \"Summarize this business analysis for the Observation Lounge: {{ $json.choices[0].message.content }}\"}]"
            },
            {
              "name": "temperature",
              "value": "0.6"
            },
            {
              "name": "max_tokens",
              "value": "200"
            }
          ]
        },
        "options": {}
      },
      "id": "observation-lounge-quark",
      "name": "Observation Lounge - Quark Summary",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1136,
        304
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"crew_member\": \"Quark\", \"response\": $json.choices[0].message.content, \"llm_used\": $json.optimalLLM, \"confidence\": $json.confidence, \"business_context\": $json.businessContext, \"reasoning\": $json.reasoning, \"timestamp\": new Date().toISOString(), \"observation_lounge_summary\": $input.last().json.choices[0].message.content } }}",
        "options": {}
      },
      "id": "quark-response-optimized",
      "name": "Quark Response (Optimized)",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1360,
        304
      ]
    }
  ],
  "connections": {
    "quark-directive-webhook": {
      "main": [
        [
          {
            "node": "business-context-analysis",
            "type": "main",
            "index": 0
          },
          {
            "node": "quark-memory-retrieval",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "business-context-analysis": {
      "main": [
        [
          {
            "node": "llm-optimization-quark",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "llm-optimization-quark": {
      "main": [
        [
          {
            "node": "quark-ai-agent-optimized",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "quark-ai-agent-optimized": {
      "main": [
        [
          {
            "node": "quark-memory-storage-optimized",
            "type": "main",
            "index": 0
          },
          {
            "node": "observation-lounge-quark",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "quark-memory-storage-optimized": {
      "main": [
        [
          {
            "node": "quark-response-optimized",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "quark-memory-retrieval": {
      "main": [
        [
          {
            "node": "quark-ai-agent-optimized",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "observation-lounge-quark": {
      "main": [
        [
          {
            "node": "quark-response-optimized",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {},
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "ce1fcaf8-cc84-4a88-848c-ed21e0e88518",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-08-27T04:28:32.258Z",
      "updatedAt": "2025-08-27T04:28:32.258Z",
      "role": "workflow:owner",
      "workflowId": "L6K4bzSKlGC36ABL",
      "projectId": "4Pe2tfKPH8e3rX41",
      "project": {
        "createdAt": "2025-08-25T04:21:27.484Z",
        "updatedAt": "2025-08-25T04:34:05.592Z",
        "id": "4Pe2tfKPH8e3rX41",
        "name": "Brady Georgen <brady@pbradygeorgen.com>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-08-25T04:21:27.484Z",
            "updatedAt": "2025-08-25T04:21:27.484Z",
            "role": "project:personalOwner",
            "userId": "5e07dbef-2d2f-46b5-ad7d-2b23e96ea566",
            "projectId": "4Pe2tfKPH8e3rX41",
            "user": {
              "createdAt": "2025-08-25T04:21:26.701Z",
              "updatedAt": "2025-09-21T04:00:05.000Z",
              "id": "5e07dbef-2d2f-46b5-ad7d-2b23e96ea566",
              "email": "brady@pbradygeorgen.com",
              "firstName": "Brady",
              "lastName": "Georgen",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-08-25T04:35:52.493Z",
                "personalization_survey_n8n_version": "1.107.4",
                "automationGoalDevops": [
                  "other"
                ],
                "automationGoalDevopsOther": "Experimentation",
                "companyIndustryExtended": [
                  "it-industry",
                  "msp",
                  "media-industry",
                  "marketing-industry"
                ],
                "companySize": "personalUser",
                "companyType": "other",
                "role": "it",
                "reportedSource": "youtube"
              },
              "settings": {
                "userActivated": true,
                "firstSuccessfulWorkflowId": "YIm1VzYzVdphsjb9",
                "userActivatedAt": 1756858725166,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1757328495060
                }
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-09-21",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}